/*
 * TencentBlueKing is pleased to support the open source community by making
 * 蓝鲸智云 - 微网关(BlueKing - Micro APIGateway) available.
 * Copyright (C) 2025 Tencent. All rights reserved.
 * Licensed under the MIT License (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/MIT
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * We undertake not to change the open source license (MIT license) applicable
 * to the current version of the project delivered to anyone in the future.
 */

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/TencentBlueKing/blueking-micro-apigateway/apiserver/pkg/entity/model"
)

func newGatewaySyncData(db *gorm.DB, opts ...gen.DOOption) gatewaySyncData {
	_gatewaySyncData := gatewaySyncData{}

	_gatewaySyncData.gatewaySyncDataDo.UseDB(db, opts...)
	_gatewaySyncData.gatewaySyncDataDo.UseModel(&model.GatewaySyncData{})

	tableName := _gatewaySyncData.gatewaySyncDataDo.TableName()
	_gatewaySyncData.ALL = field.NewAsterisk(tableName)
	_gatewaySyncData.AutoID = field.NewInt(tableName, "auto_id")
	_gatewaySyncData.ID = field.NewString(tableName, "id")
	_gatewaySyncData.GatewayID = field.NewInt(tableName, "gateway_id")
	_gatewaySyncData.Type = field.NewString(tableName, "type")
	_gatewaySyncData.Config = field.NewField(tableName, "config")
	_gatewaySyncData.ModRevision = field.NewInt(tableName, "mod_revision")
	_gatewaySyncData.CreatedAt = field.NewTime(tableName, "created_at")
	_gatewaySyncData.UpdatedAt = field.NewTime(tableName, "updated_at")

	_gatewaySyncData.fillFieldMap()

	return _gatewaySyncData
}

type gatewaySyncData struct {
	gatewaySyncDataDo gatewaySyncDataDo

	ALL         field.Asterisk
	AutoID      field.Int
	ID          field.String
	GatewayID   field.Int
	Type        field.String
	Config      field.Field
	ModRevision field.Int
	CreatedAt   field.Time
	UpdatedAt   field.Time

	fieldMap map[string]field.Expr
}

// Table ...
func (g gatewaySyncData) Table(newTableName string) *gatewaySyncData {
	g.gatewaySyncDataDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

// As ...
func (g gatewaySyncData) As(alias string) *gatewaySyncData {
	g.gatewaySyncDataDo.DO = *(g.gatewaySyncDataDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gatewaySyncData) updateTableName(table string) *gatewaySyncData {
	g.ALL = field.NewAsterisk(table)
	g.AutoID = field.NewInt(table, "auto_id")
	g.ID = field.NewString(table, "id")
	g.GatewayID = field.NewInt(table, "gateway_id")
	g.Type = field.NewString(table, "type")
	g.Config = field.NewField(table, "config")
	g.ModRevision = field.NewInt(table, "mod_revision")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")

	g.fillFieldMap()

	return g
}

// WithContext ...
func (g *gatewaySyncData) WithContext(ctx context.Context) IGatewaySyncDataDo {
	return g.gatewaySyncDataDo.WithContext(ctx)
}

// TableName ...
func (g gatewaySyncData) TableName() string { return g.gatewaySyncDataDo.TableName() }

// Alias ...
func (g gatewaySyncData) Alias() string { return g.gatewaySyncDataDo.Alias() }

// Columns ...
func (g gatewaySyncData) Columns(cols ...field.Expr) gen.Columns {
	return g.gatewaySyncDataDo.Columns(cols...)
}

// GetFieldByName ...
func (g *gatewaySyncData) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gatewaySyncData) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 8)
	g.fieldMap["auto_id"] = g.AutoID
	g.fieldMap["id"] = g.ID
	g.fieldMap["gateway_id"] = g.GatewayID
	g.fieldMap["type"] = g.Type
	g.fieldMap["config"] = g.Config
	g.fieldMap["mod_revision"] = g.ModRevision
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
}

func (g gatewaySyncData) clone(db *gorm.DB) gatewaySyncData {
	g.gatewaySyncDataDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gatewaySyncData) replaceDB(db *gorm.DB) gatewaySyncData {
	g.gatewaySyncDataDo.ReplaceDB(db)
	return g
}

type gatewaySyncDataDo struct{ gen.DO }

// IGatewaySyncDataDo ...
type IGatewaySyncDataDo interface {
	gen.SubQuery
	Debug() IGatewaySyncDataDo
	WithContext(ctx context.Context) IGatewaySyncDataDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGatewaySyncDataDo
	WriteDB() IGatewaySyncDataDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGatewaySyncDataDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGatewaySyncDataDo
	Not(conds ...gen.Condition) IGatewaySyncDataDo
	Or(conds ...gen.Condition) IGatewaySyncDataDo
	Select(conds ...field.Expr) IGatewaySyncDataDo
	Where(conds ...gen.Condition) IGatewaySyncDataDo
	Order(conds ...field.Expr) IGatewaySyncDataDo
	Distinct(cols ...field.Expr) IGatewaySyncDataDo
	Omit(cols ...field.Expr) IGatewaySyncDataDo
	Join(table schema.Tabler, on ...field.Expr) IGatewaySyncDataDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGatewaySyncDataDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGatewaySyncDataDo
	Group(cols ...field.Expr) IGatewaySyncDataDo
	Having(conds ...gen.Condition) IGatewaySyncDataDo
	Limit(limit int) IGatewaySyncDataDo
	Offset(offset int) IGatewaySyncDataDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGatewaySyncDataDo
	Unscoped() IGatewaySyncDataDo
	Create(values ...*model.GatewaySyncData) error
	CreateInBatches(values []*model.GatewaySyncData, batchSize int) error
	Save(values ...*model.GatewaySyncData) error
	First() (*model.GatewaySyncData, error)
	Take() (*model.GatewaySyncData, error)
	Last() (*model.GatewaySyncData, error)
	Find() ([]*model.GatewaySyncData, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GatewaySyncData, err error)
	FindInBatches(result *[]*model.GatewaySyncData, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GatewaySyncData) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGatewaySyncDataDo
	Assign(attrs ...field.AssignExpr) IGatewaySyncDataDo
	Joins(fields ...field.RelationField) IGatewaySyncDataDo
	Preload(fields ...field.RelationField) IGatewaySyncDataDo
	FirstOrInit() (*model.GatewaySyncData, error)
	FirstOrCreate() (*model.GatewaySyncData, error)
	FindByPage(offset int, limit int) (result []*model.GatewaySyncData, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGatewaySyncDataDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

// Debug ...
func (g gatewaySyncDataDo) Debug() IGatewaySyncDataDo {
	return g.withDO(g.DO.Debug())
}

// WithContext ...
func (g gatewaySyncDataDo) WithContext(ctx context.Context) IGatewaySyncDataDo {
	return g.withDO(g.DO.WithContext(ctx))
}

// ReadDB ...
func (g gatewaySyncDataDo) ReadDB() IGatewaySyncDataDo {
	return g.Clauses(dbresolver.Read)
}

// WriteDB ...
func (g gatewaySyncDataDo) WriteDB() IGatewaySyncDataDo {
	return g.Clauses(dbresolver.Write)
}

// Session ...
func (g gatewaySyncDataDo) Session(config *gorm.Session) IGatewaySyncDataDo {
	return g.withDO(g.DO.Session(config))
}

// Clauses ...
func (g gatewaySyncDataDo) Clauses(conds ...clause.Expression) IGatewaySyncDataDo {
	return g.withDO(g.DO.Clauses(conds...))
}

// Returning ...
func (g gatewaySyncDataDo) Returning(value interface{}, columns ...string) IGatewaySyncDataDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

// Not ...
func (g gatewaySyncDataDo) Not(conds ...gen.Condition) IGatewaySyncDataDo {
	return g.withDO(g.DO.Not(conds...))
}

// Or ...
func (g gatewaySyncDataDo) Or(conds ...gen.Condition) IGatewaySyncDataDo {
	return g.withDO(g.DO.Or(conds...))
}

// Select ...
func (g gatewaySyncDataDo) Select(conds ...field.Expr) IGatewaySyncDataDo {
	return g.withDO(g.DO.Select(conds...))
}

// Where ...
func (g gatewaySyncDataDo) Where(conds ...gen.Condition) IGatewaySyncDataDo {
	return g.withDO(g.DO.Where(conds...))
}

// Order ...
func (g gatewaySyncDataDo) Order(conds ...field.Expr) IGatewaySyncDataDo {
	return g.withDO(g.DO.Order(conds...))
}

// Distinct ...
func (g gatewaySyncDataDo) Distinct(cols ...field.Expr) IGatewaySyncDataDo {
	return g.withDO(g.DO.Distinct(cols...))
}

// Omit ...
func (g gatewaySyncDataDo) Omit(cols ...field.Expr) IGatewaySyncDataDo {
	return g.withDO(g.DO.Omit(cols...))
}

// Join ...
func (g gatewaySyncDataDo) Join(table schema.Tabler, on ...field.Expr) IGatewaySyncDataDo {
	return g.withDO(g.DO.Join(table, on...))
}

// LeftJoin ...
func (g gatewaySyncDataDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGatewaySyncDataDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

// RightJoin ...
func (g gatewaySyncDataDo) RightJoin(table schema.Tabler, on ...field.Expr) IGatewaySyncDataDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

// Group ...
func (g gatewaySyncDataDo) Group(cols ...field.Expr) IGatewaySyncDataDo {
	return g.withDO(g.DO.Group(cols...))
}

// Having ...
func (g gatewaySyncDataDo) Having(conds ...gen.Condition) IGatewaySyncDataDo {
	return g.withDO(g.DO.Having(conds...))
}

// Limit ...
func (g gatewaySyncDataDo) Limit(limit int) IGatewaySyncDataDo {
	return g.withDO(g.DO.Limit(limit))
}

// Offset ...
func (g gatewaySyncDataDo) Offset(offset int) IGatewaySyncDataDo {
	return g.withDO(g.DO.Offset(offset))
}

// Scopes ...
func (g gatewaySyncDataDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGatewaySyncDataDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

// Unscoped ...
func (g gatewaySyncDataDo) Unscoped() IGatewaySyncDataDo {
	return g.withDO(g.DO.Unscoped())
}

// Create ...
func (g gatewaySyncDataDo) Create(values ...*model.GatewaySyncData) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

// CreateInBatches ...
func (g gatewaySyncDataDo) CreateInBatches(values []*model.GatewaySyncData, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gatewaySyncDataDo) Save(values ...*model.GatewaySyncData) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

// First ...
func (g gatewaySyncDataDo) First() (*model.GatewaySyncData, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewaySyncData), nil
	}
}

// Take ...
func (g gatewaySyncDataDo) Take() (*model.GatewaySyncData, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewaySyncData), nil
	}
}

// Last ...
func (g gatewaySyncDataDo) Last() (*model.GatewaySyncData, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewaySyncData), nil
	}
}

// Find ...
func (g gatewaySyncDataDo) Find() ([]*model.GatewaySyncData, error) {
	result, err := g.DO.Find()
	return result.([]*model.GatewaySyncData), err
}

// FindInBatch ...
func (g gatewaySyncDataDo) FindInBatch(
	batchSize int,
	fc func(tx gen.Dao, batch int) error,
) (results []*model.GatewaySyncData, err error) {
	buf := make([]*model.GatewaySyncData, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

// FindInBatches ...
func (g gatewaySyncDataDo) FindInBatches(
	result *[]*model.GatewaySyncData,
	batchSize int,
	fc func(tx gen.Dao, batch int) error,
) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

// Attrs ...
func (g gatewaySyncDataDo) Attrs(attrs ...field.AssignExpr) IGatewaySyncDataDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

// Assign ...
func (g gatewaySyncDataDo) Assign(attrs ...field.AssignExpr) IGatewaySyncDataDo {
	return g.withDO(g.DO.Assign(attrs...))
}

// Joins ...
func (g gatewaySyncDataDo) Joins(fields ...field.RelationField) IGatewaySyncDataDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

// Preload ...
func (g gatewaySyncDataDo) Preload(fields ...field.RelationField) IGatewaySyncDataDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

// FirstOrInit ...
func (g gatewaySyncDataDo) FirstOrInit() (*model.GatewaySyncData, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewaySyncData), nil
	}
}

// FirstOrCreate ...
func (g gatewaySyncDataDo) FirstOrCreate() (*model.GatewaySyncData, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewaySyncData), nil
	}
}

// FindByPage ...
func (g gatewaySyncDataDo) FindByPage(
	offset int,
	limit int,
) (result []*model.GatewaySyncData, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

// ScanByPage ...
func (g gatewaySyncDataDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

// Scan ...
func (g gatewaySyncDataDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

// Delete ...
func (g gatewaySyncDataDo) Delete(models ...*model.GatewaySyncData) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gatewaySyncDataDo) withDO(do gen.Dao) *gatewaySyncDataDo {
	g.DO = *do.(*gen.DO)
	return g
}
