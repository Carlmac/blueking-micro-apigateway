/*
 * TencentBlueKing is pleased to support the open source community by making
 * 蓝鲸智云 - 微网关(BlueKing - Micro APIGateway) available.
 * Copyright (C) 2025 Tencent. All rights reserved.
 * Licensed under the MIT License (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/MIT
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * We undertake not to change the open source license (MIT license) applicable
 * to the current version of the project delivered to anyone in the future.
 */

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/TencentBlueKing/blueking-micro-apigateway/apiserver/pkg/entity/model"
)

func newPluginMetadata(db *gorm.DB, opts ...gen.DOOption) pluginMetadata {
	_pluginMetadata := pluginMetadata{}

	_pluginMetadata.pluginMetadataDo.UseDB(db, opts...)
	_pluginMetadata.pluginMetadataDo.UseModel(&model.PluginMetadata{})

	tableName := _pluginMetadata.pluginMetadataDo.TableName()
	_pluginMetadata.ALL = field.NewAsterisk(tableName)
	_pluginMetadata.Name = field.NewString(tableName, "name")
	_pluginMetadata.Creator = field.NewString(tableName, "creator")
	_pluginMetadata.Updater = field.NewString(tableName, "updater")
	_pluginMetadata.CreatedAt = field.NewTime(tableName, "created_at")
	_pluginMetadata.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pluginMetadata.AutoID = field.NewInt(tableName, "auto_id")
	_pluginMetadata.ID = field.NewString(tableName, "id")
	_pluginMetadata.GatewayID = field.NewInt(tableName, "gateway_id")
	_pluginMetadata.Config = field.NewField(tableName, "config")
	_pluginMetadata.Status = field.NewString(tableName, "status")

	_pluginMetadata.fillFieldMap()

	return _pluginMetadata
}

type pluginMetadata struct {
	pluginMetadataDo pluginMetadataDo

	ALL       field.Asterisk
	Name      field.String
	Creator   field.String
	Updater   field.String
	CreatedAt field.Time
	UpdatedAt field.Time
	AutoID    field.Int
	ID        field.String
	GatewayID field.Int
	Config    field.Field
	Status    field.String

	fieldMap map[string]field.Expr
}

// Table ...
func (p pluginMetadata) Table(newTableName string) *pluginMetadata {
	p.pluginMetadataDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

// As ...
func (p pluginMetadata) As(alias string) *pluginMetadata {
	p.pluginMetadataDo.DO = *(p.pluginMetadataDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pluginMetadata) updateTableName(table string) *pluginMetadata {
	p.ALL = field.NewAsterisk(table)
	p.Name = field.NewString(table, "name")
	p.Creator = field.NewString(table, "creator")
	p.Updater = field.NewString(table, "updater")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.AutoID = field.NewInt(table, "auto_id")
	p.ID = field.NewString(table, "id")
	p.GatewayID = field.NewInt(table, "gateway_id")
	p.Config = field.NewField(table, "config")
	p.Status = field.NewString(table, "status")

	p.fillFieldMap()

	return p
}

// WithContext ...
func (p *pluginMetadata) WithContext(ctx context.Context) IPluginMetadataDo {
	return p.pluginMetadataDo.WithContext(ctx)
}

// TableName ...
func (p pluginMetadata) TableName() string { return p.pluginMetadataDo.TableName() }

// Alias ...
func (p pluginMetadata) Alias() string { return p.pluginMetadataDo.Alias() }

// Columns ...
func (p pluginMetadata) Columns(cols ...field.Expr) gen.Columns {
	return p.pluginMetadataDo.Columns(cols...)
}

// GetFieldByName ...
func (p *pluginMetadata) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pluginMetadata) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 10)
	p.fieldMap["name"] = p.Name
	p.fieldMap["creator"] = p.Creator
	p.fieldMap["updater"] = p.Updater
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["auto_id"] = p.AutoID
	p.fieldMap["id"] = p.ID
	p.fieldMap["gateway_id"] = p.GatewayID
	p.fieldMap["config"] = p.Config
	p.fieldMap["status"] = p.Status
}

func (p pluginMetadata) clone(db *gorm.DB) pluginMetadata {
	p.pluginMetadataDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pluginMetadata) replaceDB(db *gorm.DB) pluginMetadata {
	p.pluginMetadataDo.ReplaceDB(db)
	return p
}

type pluginMetadataDo struct{ gen.DO }

// IPluginMetadataDo ...
type IPluginMetadataDo interface {
	gen.SubQuery
	Debug() IPluginMetadataDo
	WithContext(ctx context.Context) IPluginMetadataDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPluginMetadataDo
	WriteDB() IPluginMetadataDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPluginMetadataDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPluginMetadataDo
	Not(conds ...gen.Condition) IPluginMetadataDo
	Or(conds ...gen.Condition) IPluginMetadataDo
	Select(conds ...field.Expr) IPluginMetadataDo
	Where(conds ...gen.Condition) IPluginMetadataDo
	Order(conds ...field.Expr) IPluginMetadataDo
	Distinct(cols ...field.Expr) IPluginMetadataDo
	Omit(cols ...field.Expr) IPluginMetadataDo
	Join(table schema.Tabler, on ...field.Expr) IPluginMetadataDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPluginMetadataDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPluginMetadataDo
	Group(cols ...field.Expr) IPluginMetadataDo
	Having(conds ...gen.Condition) IPluginMetadataDo
	Limit(limit int) IPluginMetadataDo
	Offset(offset int) IPluginMetadataDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPluginMetadataDo
	Unscoped() IPluginMetadataDo
	Create(values ...*model.PluginMetadata) error
	CreateInBatches(values []*model.PluginMetadata, batchSize int) error
	Save(values ...*model.PluginMetadata) error
	First() (*model.PluginMetadata, error)
	Take() (*model.PluginMetadata, error)
	Last() (*model.PluginMetadata, error)
	Find() ([]*model.PluginMetadata, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PluginMetadata, err error)
	FindInBatches(result *[]*model.PluginMetadata, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PluginMetadata) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPluginMetadataDo
	Assign(attrs ...field.AssignExpr) IPluginMetadataDo
	Joins(fields ...field.RelationField) IPluginMetadataDo
	Preload(fields ...field.RelationField) IPluginMetadataDo
	FirstOrInit() (*model.PluginMetadata, error)
	FirstOrCreate() (*model.PluginMetadata, error)
	FindByPage(offset int, limit int) (result []*model.PluginMetadata, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPluginMetadataDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

// Debug ...
func (p pluginMetadataDo) Debug() IPluginMetadataDo {
	return p.withDO(p.DO.Debug())
}

// WithContext ...
func (p pluginMetadataDo) WithContext(ctx context.Context) IPluginMetadataDo {
	return p.withDO(p.DO.WithContext(ctx))
}

// ReadDB ...
func (p pluginMetadataDo) ReadDB() IPluginMetadataDo {
	return p.Clauses(dbresolver.Read)
}

// WriteDB ...
func (p pluginMetadataDo) WriteDB() IPluginMetadataDo {
	return p.Clauses(dbresolver.Write)
}

// Session ...
func (p pluginMetadataDo) Session(config *gorm.Session) IPluginMetadataDo {
	return p.withDO(p.DO.Session(config))
}

// Clauses ...
func (p pluginMetadataDo) Clauses(conds ...clause.Expression) IPluginMetadataDo {
	return p.withDO(p.DO.Clauses(conds...))
}

// Returning ...
func (p pluginMetadataDo) Returning(value interface{}, columns ...string) IPluginMetadataDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

// Not ...
func (p pluginMetadataDo) Not(conds ...gen.Condition) IPluginMetadataDo {
	return p.withDO(p.DO.Not(conds...))
}

// Or ...
func (p pluginMetadataDo) Or(conds ...gen.Condition) IPluginMetadataDo {
	return p.withDO(p.DO.Or(conds...))
}

// Select ...
func (p pluginMetadataDo) Select(conds ...field.Expr) IPluginMetadataDo {
	return p.withDO(p.DO.Select(conds...))
}

// Where ...
func (p pluginMetadataDo) Where(conds ...gen.Condition) IPluginMetadataDo {
	return p.withDO(p.DO.Where(conds...))
}

// Order ...
func (p pluginMetadataDo) Order(conds ...field.Expr) IPluginMetadataDo {
	return p.withDO(p.DO.Order(conds...))
}

// Distinct ...
func (p pluginMetadataDo) Distinct(cols ...field.Expr) IPluginMetadataDo {
	return p.withDO(p.DO.Distinct(cols...))
}

// Omit ...
func (p pluginMetadataDo) Omit(cols ...field.Expr) IPluginMetadataDo {
	return p.withDO(p.DO.Omit(cols...))
}

// Join ...
func (p pluginMetadataDo) Join(table schema.Tabler, on ...field.Expr) IPluginMetadataDo {
	return p.withDO(p.DO.Join(table, on...))
}

// LeftJoin ...
func (p pluginMetadataDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPluginMetadataDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

// RightJoin ...
func (p pluginMetadataDo) RightJoin(table schema.Tabler, on ...field.Expr) IPluginMetadataDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

// Group ...
func (p pluginMetadataDo) Group(cols ...field.Expr) IPluginMetadataDo {
	return p.withDO(p.DO.Group(cols...))
}

// Having ...
func (p pluginMetadataDo) Having(conds ...gen.Condition) IPluginMetadataDo {
	return p.withDO(p.DO.Having(conds...))
}

// Limit ...
func (p pluginMetadataDo) Limit(limit int) IPluginMetadataDo {
	return p.withDO(p.DO.Limit(limit))
}

// Offset ...
func (p pluginMetadataDo) Offset(offset int) IPluginMetadataDo {
	return p.withDO(p.DO.Offset(offset))
}

// Scopes ...
func (p pluginMetadataDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPluginMetadataDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

// Unscoped ...
func (p pluginMetadataDo) Unscoped() IPluginMetadataDo {
	return p.withDO(p.DO.Unscoped())
}

// Create ...
func (p pluginMetadataDo) Create(values ...*model.PluginMetadata) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

// CreateInBatches ...
func (p pluginMetadataDo) CreateInBatches(values []*model.PluginMetadata, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pluginMetadataDo) Save(values ...*model.PluginMetadata) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

// First ...
func (p pluginMetadataDo) First() (*model.PluginMetadata, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PluginMetadata), nil
	}
}

// Take ...
func (p pluginMetadataDo) Take() (*model.PluginMetadata, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PluginMetadata), nil
	}
}

// Last ...
func (p pluginMetadataDo) Last() (*model.PluginMetadata, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PluginMetadata), nil
	}
}

// Find ...
func (p pluginMetadataDo) Find() ([]*model.PluginMetadata, error) {
	result, err := p.DO.Find()
	return result.([]*model.PluginMetadata), err
}

// FindInBatch ...
func (p pluginMetadataDo) FindInBatch(
	batchSize int,
	fc func(tx gen.Dao, batch int) error,
) (results []*model.PluginMetadata, err error) {
	buf := make([]*model.PluginMetadata, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

// FindInBatches ...
func (p pluginMetadataDo) FindInBatches(
	result *[]*model.PluginMetadata,
	batchSize int,
	fc func(tx gen.Dao, batch int) error,
) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

// Attrs ...
func (p pluginMetadataDo) Attrs(attrs ...field.AssignExpr) IPluginMetadataDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

// Assign ...
func (p pluginMetadataDo) Assign(attrs ...field.AssignExpr) IPluginMetadataDo {
	return p.withDO(p.DO.Assign(attrs...))
}

// Joins ...
func (p pluginMetadataDo) Joins(fields ...field.RelationField) IPluginMetadataDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

// Preload ...
func (p pluginMetadataDo) Preload(fields ...field.RelationField) IPluginMetadataDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

// FirstOrInit ...
func (p pluginMetadataDo) FirstOrInit() (*model.PluginMetadata, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PluginMetadata), nil
	}
}

// FirstOrCreate ...
func (p pluginMetadataDo) FirstOrCreate() (*model.PluginMetadata, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PluginMetadata), nil
	}
}

// FindByPage ...
func (p pluginMetadataDo) FindByPage(offset int, limit int) (result []*model.PluginMetadata, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

// ScanByPage ...
func (p pluginMetadataDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

// Scan ...
func (p pluginMetadataDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

// Delete ...
func (p pluginMetadataDo) Delete(models ...*model.PluginMetadata) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pluginMetadataDo) withDO(do gen.Dao) *pluginMetadataDo {
	p.DO = *do.(*gen.DO)
	return p
}
