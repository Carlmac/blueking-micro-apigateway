/*
 * TencentBlueKing is pleased to support the open source community by making
 * 蓝鲸智云 - 微网关(BlueKing - Micro APIGateway) available.
 * Copyright (C) 2025 Tencent. All rights reserved.
 * Licensed under the MIT License (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/MIT
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * We undertake not to change the open source license (MIT license) applicable
 * to the current version of the project delivered to anyone in the future.
 */

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/TencentBlueKing/blueking-micro-apigateway/apiserver/pkg/entity/model"
)

func newRoute(db *gorm.DB, opts ...gen.DOOption) route {
	_route := route{}

	_route.routeDo.UseDB(db, opts...)
	_route.routeDo.UseModel(&model.Route{})

	tableName := _route.routeDo.TableName()
	_route.ALL = field.NewAsterisk(tableName)
	_route.Name = field.NewString(tableName, "name")
	_route.ServiceID = field.NewString(tableName, "service_id")
	_route.UpstreamID = field.NewString(tableName, "upstream_id")
	_route.PluginConfigID = field.NewString(tableName, "plugin_config_id")
	_route.Creator = field.NewString(tableName, "creator")
	_route.Updater = field.NewString(tableName, "updater")
	_route.CreatedAt = field.NewTime(tableName, "created_at")
	_route.UpdatedAt = field.NewTime(tableName, "updated_at")
	_route.AutoID = field.NewInt(tableName, "auto_id")
	_route.ID = field.NewString(tableName, "id")
	_route.GatewayID = field.NewInt(tableName, "gateway_id")
	_route.Config = field.NewField(tableName, "config")
	_route.Status = field.NewString(tableName, "status")

	_route.fillFieldMap()

	return _route
}

type route struct {
	routeDo routeDo

	ALL            field.Asterisk
	Name           field.String
	ServiceID      field.String
	UpstreamID     field.String
	PluginConfigID field.String
	Creator        field.String
	Updater        field.String
	CreatedAt      field.Time
	UpdatedAt      field.Time
	AutoID         field.Int
	ID             field.String
	GatewayID      field.Int
	Config         field.Field
	Status         field.String

	fieldMap map[string]field.Expr
}

// Table ...
func (r route) Table(newTableName string) *route {
	r.routeDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

// As ...
func (r route) As(alias string) *route {
	r.routeDo.DO = *(r.routeDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *route) updateTableName(table string) *route {
	r.ALL = field.NewAsterisk(table)
	r.Name = field.NewString(table, "name")
	r.ServiceID = field.NewString(table, "service_id")
	r.UpstreamID = field.NewString(table, "upstream_id")
	r.PluginConfigID = field.NewString(table, "plugin_config_id")
	r.Creator = field.NewString(table, "creator")
	r.Updater = field.NewString(table, "updater")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.AutoID = field.NewInt(table, "auto_id")
	r.ID = field.NewString(table, "id")
	r.GatewayID = field.NewInt(table, "gateway_id")
	r.Config = field.NewField(table, "config")
	r.Status = field.NewString(table, "status")

	r.fillFieldMap()

	return r
}

// WithContext ...
func (r *route) WithContext(ctx context.Context) IRouteDo { return r.routeDo.WithContext(ctx) }

// TableName ...
func (r route) TableName() string { return r.routeDo.TableName() }

// Alias ...
func (r route) Alias() string { return r.routeDo.Alias() }

// Columns ...
func (r route) Columns(cols ...field.Expr) gen.Columns { return r.routeDo.Columns(cols...) }

// GetFieldByName ...
func (r *route) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *route) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 13)
	r.fieldMap["name"] = r.Name
	r.fieldMap["service_id"] = r.ServiceID
	r.fieldMap["upstream_id"] = r.UpstreamID
	r.fieldMap["plugin_config_id"] = r.PluginConfigID
	r.fieldMap["creator"] = r.Creator
	r.fieldMap["updater"] = r.Updater
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["auto_id"] = r.AutoID
	r.fieldMap["id"] = r.ID
	r.fieldMap["gateway_id"] = r.GatewayID
	r.fieldMap["config"] = r.Config
	r.fieldMap["status"] = r.Status
}

func (r route) clone(db *gorm.DB) route {
	r.routeDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r route) replaceDB(db *gorm.DB) route {
	r.routeDo.ReplaceDB(db)
	return r
}

type routeDo struct{ gen.DO }

// IRouteDo ...
type IRouteDo interface {
	gen.SubQuery
	Debug() IRouteDo
	WithContext(ctx context.Context) IRouteDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRouteDo
	WriteDB() IRouteDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRouteDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRouteDo
	Not(conds ...gen.Condition) IRouteDo
	Or(conds ...gen.Condition) IRouteDo
	Select(conds ...field.Expr) IRouteDo
	Where(conds ...gen.Condition) IRouteDo
	Order(conds ...field.Expr) IRouteDo
	Distinct(cols ...field.Expr) IRouteDo
	Omit(cols ...field.Expr) IRouteDo
	Join(table schema.Tabler, on ...field.Expr) IRouteDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRouteDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRouteDo
	Group(cols ...field.Expr) IRouteDo
	Having(conds ...gen.Condition) IRouteDo
	Limit(limit int) IRouteDo
	Offset(offset int) IRouteDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRouteDo
	Unscoped() IRouteDo
	Create(values ...*model.Route) error
	CreateInBatches(values []*model.Route, batchSize int) error
	Save(values ...*model.Route) error
	First() (*model.Route, error)
	Take() (*model.Route, error)
	Last() (*model.Route, error)
	Find() ([]*model.Route, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Route, err error)
	FindInBatches(result *[]*model.Route, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Route) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRouteDo
	Assign(attrs ...field.AssignExpr) IRouteDo
	Joins(fields ...field.RelationField) IRouteDo
	Preload(fields ...field.RelationField) IRouteDo
	FirstOrInit() (*model.Route, error)
	FirstOrCreate() (*model.Route, error)
	FindByPage(offset int, limit int) (result []*model.Route, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRouteDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

// Debug ...
func (r routeDo) Debug() IRouteDo {
	return r.withDO(r.DO.Debug())
}

// WithContext ...
func (r routeDo) WithContext(ctx context.Context) IRouteDo {
	return r.withDO(r.DO.WithContext(ctx))
}

// ReadDB ...
func (r routeDo) ReadDB() IRouteDo {
	return r.Clauses(dbresolver.Read)
}

// WriteDB ...
func (r routeDo) WriteDB() IRouteDo {
	return r.Clauses(dbresolver.Write)
}

// Session ...
func (r routeDo) Session(config *gorm.Session) IRouteDo {
	return r.withDO(r.DO.Session(config))
}

// Clauses ...
func (r routeDo) Clauses(conds ...clause.Expression) IRouteDo {
	return r.withDO(r.DO.Clauses(conds...))
}

// Returning ...
func (r routeDo) Returning(value interface{}, columns ...string) IRouteDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

// Not ...
func (r routeDo) Not(conds ...gen.Condition) IRouteDo {
	return r.withDO(r.DO.Not(conds...))
}

// Or ...
func (r routeDo) Or(conds ...gen.Condition) IRouteDo {
	return r.withDO(r.DO.Or(conds...))
}

// Select ...
func (r routeDo) Select(conds ...field.Expr) IRouteDo {
	return r.withDO(r.DO.Select(conds...))
}

// Where ...
func (r routeDo) Where(conds ...gen.Condition) IRouteDo {
	return r.withDO(r.DO.Where(conds...))
}

// Order ...
func (r routeDo) Order(conds ...field.Expr) IRouteDo {
	return r.withDO(r.DO.Order(conds...))
}

// Distinct ...
func (r routeDo) Distinct(cols ...field.Expr) IRouteDo {
	return r.withDO(r.DO.Distinct(cols...))
}

// Omit ...
func (r routeDo) Omit(cols ...field.Expr) IRouteDo {
	return r.withDO(r.DO.Omit(cols...))
}

// Join ...
func (r routeDo) Join(table schema.Tabler, on ...field.Expr) IRouteDo {
	return r.withDO(r.DO.Join(table, on...))
}

// LeftJoin ...
func (r routeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRouteDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

// RightJoin ...
func (r routeDo) RightJoin(table schema.Tabler, on ...field.Expr) IRouteDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

// Group ...
func (r routeDo) Group(cols ...field.Expr) IRouteDo {
	return r.withDO(r.DO.Group(cols...))
}

// Having ...
func (r routeDo) Having(conds ...gen.Condition) IRouteDo {
	return r.withDO(r.DO.Having(conds...))
}

// Limit ...
func (r routeDo) Limit(limit int) IRouteDo {
	return r.withDO(r.DO.Limit(limit))
}

// Offset ...
func (r routeDo) Offset(offset int) IRouteDo {
	return r.withDO(r.DO.Offset(offset))
}

// Scopes ...
func (r routeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRouteDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

// Unscoped ...
func (r routeDo) Unscoped() IRouteDo {
	return r.withDO(r.DO.Unscoped())
}

// Create ...
func (r routeDo) Create(values ...*model.Route) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

// CreateInBatches ...
func (r routeDo) CreateInBatches(values []*model.Route, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r routeDo) Save(values ...*model.Route) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

// First ...
func (r routeDo) First() (*model.Route, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Route), nil
	}
}

// Take ...
func (r routeDo) Take() (*model.Route, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Route), nil
	}
}

// Last ...
func (r routeDo) Last() (*model.Route, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Route), nil
	}
}

// Find ...
func (r routeDo) Find() ([]*model.Route, error) {
	result, err := r.DO.Find()
	return result.([]*model.Route), err
}

// FindInBatch ...
func (r routeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Route, err error) {
	buf := make([]*model.Route, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

// FindInBatches ...
func (r routeDo) FindInBatches(result *[]*model.Route, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

// Attrs ...
func (r routeDo) Attrs(attrs ...field.AssignExpr) IRouteDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

// Assign ...
func (r routeDo) Assign(attrs ...field.AssignExpr) IRouteDo {
	return r.withDO(r.DO.Assign(attrs...))
}

// Joins ...
func (r routeDo) Joins(fields ...field.RelationField) IRouteDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

// Preload ...
func (r routeDo) Preload(fields ...field.RelationField) IRouteDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

// FirstOrInit ...
func (r routeDo) FirstOrInit() (*model.Route, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Route), nil
	}
}

// FirstOrCreate ...
func (r routeDo) FirstOrCreate() (*model.Route, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Route), nil
	}
}

// FindByPage ...
func (r routeDo) FindByPage(offset int, limit int) (result []*model.Route, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

// ScanByPage ...
func (r routeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

// Scan ...
func (r routeDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

// Delete ...
func (r routeDo) Delete(models ...*model.Route) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *routeDo) withDO(do gen.Dao) *routeDo {
	r.DO = *do.(*gen.DO)
	return r
}
