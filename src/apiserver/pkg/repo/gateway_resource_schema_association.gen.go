/*
 * TencentBlueKing is pleased to support the open source community by making
 * 蓝鲸智云 - 微网关(BlueKing - Micro APIGateway) available.
 * Copyright (C) 2025 Tencent. All rights reserved.
 * Licensed under the MIT License (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/MIT
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * We undertake not to change the open source license (MIT license) applicable
 * to the current version of the project delivered to anyone in the future.
 */

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/TencentBlueKing/blueking-micro-apigateway/apiserver/pkg/entity/model"
)

func newGatewayResourceSchemaAssociation(db *gorm.DB, opts ...gen.DOOption) gatewayResourceSchemaAssociation {
	_gatewayResourceSchemaAssociation := gatewayResourceSchemaAssociation{}

	_gatewayResourceSchemaAssociation.gatewayResourceSchemaAssociationDo.UseDB(db, opts...)
	_gatewayResourceSchemaAssociation.gatewayResourceSchemaAssociationDo.UseModel(
		&model.GatewayResourceSchemaAssociation{},
	)

	tableName := _gatewayResourceSchemaAssociation.gatewayResourceSchemaAssociationDo.TableName()
	_gatewayResourceSchemaAssociation.ALL = field.NewAsterisk(tableName)
	_gatewayResourceSchemaAssociation.AutoID = field.NewInt(tableName, "auto_id")
	_gatewayResourceSchemaAssociation.GatewayID = field.NewInt(tableName, "gateway_id")
	_gatewayResourceSchemaAssociation.SchemaID = field.NewInt(tableName, "schema_id")
	_gatewayResourceSchemaAssociation.ResourceID = field.NewString(tableName, "resource_id")
	_gatewayResourceSchemaAssociation.ResourceType = field.NewString(tableName, "resource_type")

	_gatewayResourceSchemaAssociation.fillFieldMap()

	return _gatewayResourceSchemaAssociation
}

type gatewayResourceSchemaAssociation struct {
	gatewayResourceSchemaAssociationDo gatewayResourceSchemaAssociationDo

	ALL          field.Asterisk
	AutoID       field.Int
	GatewayID    field.Int
	SchemaID     field.Int
	ResourceID   field.String
	ResourceType field.String

	fieldMap map[string]field.Expr
}

// Table ...
func (g gatewayResourceSchemaAssociation) Table(newTableName string) *gatewayResourceSchemaAssociation {
	g.gatewayResourceSchemaAssociationDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

// As ...
func (g gatewayResourceSchemaAssociation) As(alias string) *gatewayResourceSchemaAssociation {
	g.gatewayResourceSchemaAssociationDo.DO = *(g.gatewayResourceSchemaAssociationDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gatewayResourceSchemaAssociation) updateTableName(table string) *gatewayResourceSchemaAssociation {
	g.ALL = field.NewAsterisk(table)
	g.AutoID = field.NewInt(table, "auto_id")
	g.GatewayID = field.NewInt(table, "gateway_id")
	g.SchemaID = field.NewInt(table, "schema_id")
	g.ResourceID = field.NewString(table, "resource_id")
	g.ResourceType = field.NewString(table, "resource_type")

	g.fillFieldMap()

	return g
}

// WithContext ...
func (g *gatewayResourceSchemaAssociation) WithContext(ctx context.Context) IGatewayResourceSchemaAssociationDo {
	return g.gatewayResourceSchemaAssociationDo.WithContext(ctx)
}

// TableName ...
func (g gatewayResourceSchemaAssociation) TableName() string {
	return g.gatewayResourceSchemaAssociationDo.TableName()
}

// Alias ...
func (g gatewayResourceSchemaAssociation) Alias() string {
	return g.gatewayResourceSchemaAssociationDo.Alias()
}

// Columns ...
func (g gatewayResourceSchemaAssociation) Columns(cols ...field.Expr) gen.Columns {
	return g.gatewayResourceSchemaAssociationDo.Columns(cols...)
}

// GetFieldByName ...
func (g *gatewayResourceSchemaAssociation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gatewayResourceSchemaAssociation) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 5)
	g.fieldMap["auto_id"] = g.AutoID
	g.fieldMap["gateway_id"] = g.GatewayID
	g.fieldMap["schema_id"] = g.SchemaID
	g.fieldMap["resource_id"] = g.ResourceID
	g.fieldMap["resource_type"] = g.ResourceType
}

func (g gatewayResourceSchemaAssociation) clone(db *gorm.DB) gatewayResourceSchemaAssociation {
	g.gatewayResourceSchemaAssociationDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gatewayResourceSchemaAssociation) replaceDB(db *gorm.DB) gatewayResourceSchemaAssociation {
	g.gatewayResourceSchemaAssociationDo.ReplaceDB(db)
	return g
}

type gatewayResourceSchemaAssociationDo struct{ gen.DO }

// IGatewayResourceSchemaAssociationDo ...
type IGatewayResourceSchemaAssociationDo interface {
	gen.SubQuery
	Debug() IGatewayResourceSchemaAssociationDo
	WithContext(ctx context.Context) IGatewayResourceSchemaAssociationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGatewayResourceSchemaAssociationDo
	WriteDB() IGatewayResourceSchemaAssociationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGatewayResourceSchemaAssociationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGatewayResourceSchemaAssociationDo
	Not(conds ...gen.Condition) IGatewayResourceSchemaAssociationDo
	Or(conds ...gen.Condition) IGatewayResourceSchemaAssociationDo
	Select(conds ...field.Expr) IGatewayResourceSchemaAssociationDo
	Where(conds ...gen.Condition) IGatewayResourceSchemaAssociationDo
	Order(conds ...field.Expr) IGatewayResourceSchemaAssociationDo
	Distinct(cols ...field.Expr) IGatewayResourceSchemaAssociationDo
	Omit(cols ...field.Expr) IGatewayResourceSchemaAssociationDo
	Join(table schema.Tabler, on ...field.Expr) IGatewayResourceSchemaAssociationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGatewayResourceSchemaAssociationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGatewayResourceSchemaAssociationDo
	Group(cols ...field.Expr) IGatewayResourceSchemaAssociationDo
	Having(conds ...gen.Condition) IGatewayResourceSchemaAssociationDo
	Limit(limit int) IGatewayResourceSchemaAssociationDo
	Offset(offset int) IGatewayResourceSchemaAssociationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGatewayResourceSchemaAssociationDo
	Unscoped() IGatewayResourceSchemaAssociationDo
	Create(values ...*model.GatewayResourceSchemaAssociation) error
	CreateInBatches(values []*model.GatewayResourceSchemaAssociation, batchSize int) error
	Save(values ...*model.GatewayResourceSchemaAssociation) error
	First() (*model.GatewayResourceSchemaAssociation, error)
	Take() (*model.GatewayResourceSchemaAssociation, error)
	Last() (*model.GatewayResourceSchemaAssociation, error)
	Find() ([]*model.GatewayResourceSchemaAssociation, error)
	FindInBatch(
		batchSize int,
		fc func(tx gen.Dao, batch int) error,
	) (results []*model.GatewayResourceSchemaAssociation, err error)
	FindInBatches(
		result *[]*model.GatewayResourceSchemaAssociation,
		batchSize int,
		fc func(tx gen.Dao, batch int) error,
	) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GatewayResourceSchemaAssociation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGatewayResourceSchemaAssociationDo
	Assign(attrs ...field.AssignExpr) IGatewayResourceSchemaAssociationDo
	Joins(fields ...field.RelationField) IGatewayResourceSchemaAssociationDo
	Preload(fields ...field.RelationField) IGatewayResourceSchemaAssociationDo
	FirstOrInit() (*model.GatewayResourceSchemaAssociation, error)
	FirstOrCreate() (*model.GatewayResourceSchemaAssociation, error)
	FindByPage(offset int, limit int) (result []*model.GatewayResourceSchemaAssociation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGatewayResourceSchemaAssociationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

// Debug ...
func (g gatewayResourceSchemaAssociationDo) Debug() IGatewayResourceSchemaAssociationDo {
	return g.withDO(g.DO.Debug())
}

// WithContext ...
func (g gatewayResourceSchemaAssociationDo) WithContext(ctx context.Context) IGatewayResourceSchemaAssociationDo {
	return g.withDO(g.DO.WithContext(ctx))
}

// ReadDB ...
func (g gatewayResourceSchemaAssociationDo) ReadDB() IGatewayResourceSchemaAssociationDo {
	return g.Clauses(dbresolver.Read)
}

// WriteDB ...
func (g gatewayResourceSchemaAssociationDo) WriteDB() IGatewayResourceSchemaAssociationDo {
	return g.Clauses(dbresolver.Write)
}

// Session ...
func (g gatewayResourceSchemaAssociationDo) Session(config *gorm.Session) IGatewayResourceSchemaAssociationDo {
	return g.withDO(g.DO.Session(config))
}

// Clauses ...
func (g gatewayResourceSchemaAssociationDo) Clauses(conds ...clause.Expression) IGatewayResourceSchemaAssociationDo {
	return g.withDO(g.DO.Clauses(conds...))
}

// Returning ...
func (g gatewayResourceSchemaAssociationDo) Returning(
	value interface{},
	columns ...string,
) IGatewayResourceSchemaAssociationDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

// Not ...
func (g gatewayResourceSchemaAssociationDo) Not(conds ...gen.Condition) IGatewayResourceSchemaAssociationDo {
	return g.withDO(g.DO.Not(conds...))
}

// Or ...
func (g gatewayResourceSchemaAssociationDo) Or(conds ...gen.Condition) IGatewayResourceSchemaAssociationDo {
	return g.withDO(g.DO.Or(conds...))
}

// Select ...
func (g gatewayResourceSchemaAssociationDo) Select(conds ...field.Expr) IGatewayResourceSchemaAssociationDo {
	return g.withDO(g.DO.Select(conds...))
}

// Where ...
func (g gatewayResourceSchemaAssociationDo) Where(conds ...gen.Condition) IGatewayResourceSchemaAssociationDo {
	return g.withDO(g.DO.Where(conds...))
}

// Order ...
func (g gatewayResourceSchemaAssociationDo) Order(conds ...field.Expr) IGatewayResourceSchemaAssociationDo {
	return g.withDO(g.DO.Order(conds...))
}

// Distinct ...
func (g gatewayResourceSchemaAssociationDo) Distinct(cols ...field.Expr) IGatewayResourceSchemaAssociationDo {
	return g.withDO(g.DO.Distinct(cols...))
}

// Omit ...
func (g gatewayResourceSchemaAssociationDo) Omit(cols ...field.Expr) IGatewayResourceSchemaAssociationDo {
	return g.withDO(g.DO.Omit(cols...))
}

// Join ...
func (g gatewayResourceSchemaAssociationDo) Join(
	table schema.Tabler,
	on ...field.Expr,
) IGatewayResourceSchemaAssociationDo {
	return g.withDO(g.DO.Join(table, on...))
}

// LeftJoin ...
func (g gatewayResourceSchemaAssociationDo) LeftJoin(
	table schema.Tabler,
	on ...field.Expr,
) IGatewayResourceSchemaAssociationDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

// RightJoin ...
func (g gatewayResourceSchemaAssociationDo) RightJoin(
	table schema.Tabler,
	on ...field.Expr,
) IGatewayResourceSchemaAssociationDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

// Group ...
func (g gatewayResourceSchemaAssociationDo) Group(cols ...field.Expr) IGatewayResourceSchemaAssociationDo {
	return g.withDO(g.DO.Group(cols...))
}

// Having ...
func (g gatewayResourceSchemaAssociationDo) Having(conds ...gen.Condition) IGatewayResourceSchemaAssociationDo {
	return g.withDO(g.DO.Having(conds...))
}

// Limit ...
func (g gatewayResourceSchemaAssociationDo) Limit(limit int) IGatewayResourceSchemaAssociationDo {
	return g.withDO(g.DO.Limit(limit))
}

// Offset ...
func (g gatewayResourceSchemaAssociationDo) Offset(offset int) IGatewayResourceSchemaAssociationDo {
	return g.withDO(g.DO.Offset(offset))
}

// Scopes ...
func (g gatewayResourceSchemaAssociationDo) Scopes(
	funcs ...func(gen.Dao) gen.Dao,
) IGatewayResourceSchemaAssociationDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

// Unscoped ...
func (g gatewayResourceSchemaAssociationDo) Unscoped() IGatewayResourceSchemaAssociationDo {
	return g.withDO(g.DO.Unscoped())
}

// Create ...
func (g gatewayResourceSchemaAssociationDo) Create(values ...*model.GatewayResourceSchemaAssociation) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

// CreateInBatches ...
func (g gatewayResourceSchemaAssociationDo) CreateInBatches(
	values []*model.GatewayResourceSchemaAssociation,
	batchSize int,
) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gatewayResourceSchemaAssociationDo) Save(values ...*model.GatewayResourceSchemaAssociation) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

// First ...
func (g gatewayResourceSchemaAssociationDo) First() (*model.GatewayResourceSchemaAssociation, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayResourceSchemaAssociation), nil
	}
}

// Take ...
func (g gatewayResourceSchemaAssociationDo) Take() (*model.GatewayResourceSchemaAssociation, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayResourceSchemaAssociation), nil
	}
}

// Last ...
func (g gatewayResourceSchemaAssociationDo) Last() (*model.GatewayResourceSchemaAssociation, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayResourceSchemaAssociation), nil
	}
}

// Find ...
func (g gatewayResourceSchemaAssociationDo) Find() ([]*model.GatewayResourceSchemaAssociation, error) {
	result, err := g.DO.Find()
	return result.([]*model.GatewayResourceSchemaAssociation), err
}

// FindInBatch ...
func (g gatewayResourceSchemaAssociationDo) FindInBatch(
	batchSize int,
	fc func(tx gen.Dao, batch int) error,
) (results []*model.GatewayResourceSchemaAssociation, err error) {
	buf := make([]*model.GatewayResourceSchemaAssociation, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

// FindInBatches ...
func (g gatewayResourceSchemaAssociationDo) FindInBatches(
	result *[]*model.GatewayResourceSchemaAssociation,
	batchSize int,
	fc func(tx gen.Dao, batch int) error,
) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

// Attrs ...
func (g gatewayResourceSchemaAssociationDo) Attrs(attrs ...field.AssignExpr) IGatewayResourceSchemaAssociationDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

// Assign ...
func (g gatewayResourceSchemaAssociationDo) Assign(attrs ...field.AssignExpr) IGatewayResourceSchemaAssociationDo {
	return g.withDO(g.DO.Assign(attrs...))
}

// Joins ...
func (g gatewayResourceSchemaAssociationDo) Joins(fields ...field.RelationField) IGatewayResourceSchemaAssociationDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

// Preload ...
func (g gatewayResourceSchemaAssociationDo) Preload(
	fields ...field.RelationField,
) IGatewayResourceSchemaAssociationDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

// FirstOrInit ...
func (g gatewayResourceSchemaAssociationDo) FirstOrInit() (*model.GatewayResourceSchemaAssociation, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayResourceSchemaAssociation), nil
	}
}

// FirstOrCreate ...
func (g gatewayResourceSchemaAssociationDo) FirstOrCreate() (*model.GatewayResourceSchemaAssociation, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayResourceSchemaAssociation), nil
	}
}

// FindByPage ...
func (g gatewayResourceSchemaAssociationDo) FindByPage(
	offset int,
	limit int,
) (result []*model.GatewayResourceSchemaAssociation, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

// ScanByPage ...
func (g gatewayResourceSchemaAssociationDo) ScanByPage(
	result interface{},
	offset int,
	limit int,
) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

// Scan ...
func (g gatewayResourceSchemaAssociationDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

// Delete ...
func (g gatewayResourceSchemaAssociationDo) Delete(
	models ...*model.GatewayResourceSchemaAssociation,
) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gatewayResourceSchemaAssociationDo) withDO(do gen.Dao) *gatewayResourceSchemaAssociationDo {
	g.DO = *do.(*gen.DO)
	return g
}
