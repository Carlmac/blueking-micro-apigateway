/*
 * TencentBlueKing is pleased to support the open source community by making
 * 蓝鲸智云 - 微网关(BlueKing - Micro APIGateway) available.
 * Copyright (C) 2025 Tencent. All rights reserved.
 * Licensed under the MIT License (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/MIT
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * We undertake not to change the open source license (MIT license) applicable
 * to the current version of the project delivered to anyone in the future.
 */

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/TencentBlueKing/blueking-micro-apigateway/apiserver/pkg/entity/model"
)

func newPluginConfig(db *gorm.DB, opts ...gen.DOOption) pluginConfig {
	_pluginConfig := pluginConfig{}

	_pluginConfig.pluginConfigDo.UseDB(db, opts...)
	_pluginConfig.pluginConfigDo.UseModel(&model.PluginConfig{})

	tableName := _pluginConfig.pluginConfigDo.TableName()
	_pluginConfig.ALL = field.NewAsterisk(tableName)
	_pluginConfig.Name = field.NewString(tableName, "name")
	_pluginConfig.Creator = field.NewString(tableName, "creator")
	_pluginConfig.Updater = field.NewString(tableName, "updater")
	_pluginConfig.CreatedAt = field.NewTime(tableName, "created_at")
	_pluginConfig.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pluginConfig.AutoID = field.NewInt(tableName, "auto_id")
	_pluginConfig.ID = field.NewString(tableName, "id")
	_pluginConfig.GatewayID = field.NewInt(tableName, "gateway_id")
	_pluginConfig.Config = field.NewField(tableName, "config")
	_pluginConfig.Status = field.NewString(tableName, "status")

	_pluginConfig.fillFieldMap()

	return _pluginConfig
}

type pluginConfig struct {
	pluginConfigDo pluginConfigDo

	ALL       field.Asterisk
	Name      field.String
	Creator   field.String
	Updater   field.String
	CreatedAt field.Time
	UpdatedAt field.Time
	AutoID    field.Int
	ID        field.String
	GatewayID field.Int
	Config    field.Field
	Status    field.String

	fieldMap map[string]field.Expr
}

// Table ...
func (p pluginConfig) Table(newTableName string) *pluginConfig {
	p.pluginConfigDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

// As ...
func (p pluginConfig) As(alias string) *pluginConfig {
	p.pluginConfigDo.DO = *(p.pluginConfigDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pluginConfig) updateTableName(table string) *pluginConfig {
	p.ALL = field.NewAsterisk(table)
	p.Name = field.NewString(table, "name")
	p.Creator = field.NewString(table, "creator")
	p.Updater = field.NewString(table, "updater")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.AutoID = field.NewInt(table, "auto_id")
	p.ID = field.NewString(table, "id")
	p.GatewayID = field.NewInt(table, "gateway_id")
	p.Config = field.NewField(table, "config")
	p.Status = field.NewString(table, "status")

	p.fillFieldMap()

	return p
}

// WithContext ...
func (p *pluginConfig) WithContext(ctx context.Context) IPluginConfigDo {
	return p.pluginConfigDo.WithContext(ctx)
}

// TableName ...
func (p pluginConfig) TableName() string { return p.pluginConfigDo.TableName() }

// Alias ...
func (p pluginConfig) Alias() string { return p.pluginConfigDo.Alias() }

// Columns ...
func (p pluginConfig) Columns(cols ...field.Expr) gen.Columns {
	return p.pluginConfigDo.Columns(cols...)
}

// GetFieldByName ...
func (p *pluginConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pluginConfig) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 10)
	p.fieldMap["name"] = p.Name
	p.fieldMap["creator"] = p.Creator
	p.fieldMap["updater"] = p.Updater
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["auto_id"] = p.AutoID
	p.fieldMap["id"] = p.ID
	p.fieldMap["gateway_id"] = p.GatewayID
	p.fieldMap["config"] = p.Config
	p.fieldMap["status"] = p.Status
}

func (p pluginConfig) clone(db *gorm.DB) pluginConfig {
	p.pluginConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pluginConfig) replaceDB(db *gorm.DB) pluginConfig {
	p.pluginConfigDo.ReplaceDB(db)
	return p
}

type pluginConfigDo struct{ gen.DO }

// IPluginConfigDo ...
type IPluginConfigDo interface {
	gen.SubQuery
	Debug() IPluginConfigDo
	WithContext(ctx context.Context) IPluginConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPluginConfigDo
	WriteDB() IPluginConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPluginConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPluginConfigDo
	Not(conds ...gen.Condition) IPluginConfigDo
	Or(conds ...gen.Condition) IPluginConfigDo
	Select(conds ...field.Expr) IPluginConfigDo
	Where(conds ...gen.Condition) IPluginConfigDo
	Order(conds ...field.Expr) IPluginConfigDo
	Distinct(cols ...field.Expr) IPluginConfigDo
	Omit(cols ...field.Expr) IPluginConfigDo
	Join(table schema.Tabler, on ...field.Expr) IPluginConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPluginConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPluginConfigDo
	Group(cols ...field.Expr) IPluginConfigDo
	Having(conds ...gen.Condition) IPluginConfigDo
	Limit(limit int) IPluginConfigDo
	Offset(offset int) IPluginConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPluginConfigDo
	Unscoped() IPluginConfigDo
	Create(values ...*model.PluginConfig) error
	CreateInBatches(values []*model.PluginConfig, batchSize int) error
	Save(values ...*model.PluginConfig) error
	First() (*model.PluginConfig, error)
	Take() (*model.PluginConfig, error)
	Last() (*model.PluginConfig, error)
	Find() ([]*model.PluginConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PluginConfig, err error)
	FindInBatches(result *[]*model.PluginConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PluginConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPluginConfigDo
	Assign(attrs ...field.AssignExpr) IPluginConfigDo
	Joins(fields ...field.RelationField) IPluginConfigDo
	Preload(fields ...field.RelationField) IPluginConfigDo
	FirstOrInit() (*model.PluginConfig, error)
	FirstOrCreate() (*model.PluginConfig, error)
	FindByPage(offset int, limit int) (result []*model.PluginConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPluginConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

// Debug ...
func (p pluginConfigDo) Debug() IPluginConfigDo {
	return p.withDO(p.DO.Debug())
}

// WithContext ...
func (p pluginConfigDo) WithContext(ctx context.Context) IPluginConfigDo {
	return p.withDO(p.DO.WithContext(ctx))
}

// ReadDB ...
func (p pluginConfigDo) ReadDB() IPluginConfigDo {
	return p.Clauses(dbresolver.Read)
}

// WriteDB ...
func (p pluginConfigDo) WriteDB() IPluginConfigDo {
	return p.Clauses(dbresolver.Write)
}

// Session ...
func (p pluginConfigDo) Session(config *gorm.Session) IPluginConfigDo {
	return p.withDO(p.DO.Session(config))
}

// Clauses ...
func (p pluginConfigDo) Clauses(conds ...clause.Expression) IPluginConfigDo {
	return p.withDO(p.DO.Clauses(conds...))
}

// Returning ...
func (p pluginConfigDo) Returning(value interface{}, columns ...string) IPluginConfigDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

// Not ...
func (p pluginConfigDo) Not(conds ...gen.Condition) IPluginConfigDo {
	return p.withDO(p.DO.Not(conds...))
}

// Or ...
func (p pluginConfigDo) Or(conds ...gen.Condition) IPluginConfigDo {
	return p.withDO(p.DO.Or(conds...))
}

// Select ...
func (p pluginConfigDo) Select(conds ...field.Expr) IPluginConfigDo {
	return p.withDO(p.DO.Select(conds...))
}

// Where ...
func (p pluginConfigDo) Where(conds ...gen.Condition) IPluginConfigDo {
	return p.withDO(p.DO.Where(conds...))
}

// Order ...
func (p pluginConfigDo) Order(conds ...field.Expr) IPluginConfigDo {
	return p.withDO(p.DO.Order(conds...))
}

// Distinct ...
func (p pluginConfigDo) Distinct(cols ...field.Expr) IPluginConfigDo {
	return p.withDO(p.DO.Distinct(cols...))
}

// Omit ...
func (p pluginConfigDo) Omit(cols ...field.Expr) IPluginConfigDo {
	return p.withDO(p.DO.Omit(cols...))
}

// Join ...
func (p pluginConfigDo) Join(table schema.Tabler, on ...field.Expr) IPluginConfigDo {
	return p.withDO(p.DO.Join(table, on...))
}

// LeftJoin ...
func (p pluginConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPluginConfigDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

// RightJoin ...
func (p pluginConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IPluginConfigDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

// Group ...
func (p pluginConfigDo) Group(cols ...field.Expr) IPluginConfigDo {
	return p.withDO(p.DO.Group(cols...))
}

// Having ...
func (p pluginConfigDo) Having(conds ...gen.Condition) IPluginConfigDo {
	return p.withDO(p.DO.Having(conds...))
}

// Limit ...
func (p pluginConfigDo) Limit(limit int) IPluginConfigDo {
	return p.withDO(p.DO.Limit(limit))
}

// Offset ...
func (p pluginConfigDo) Offset(offset int) IPluginConfigDo {
	return p.withDO(p.DO.Offset(offset))
}

// Scopes ...
func (p pluginConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPluginConfigDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

// Unscoped ...
func (p pluginConfigDo) Unscoped() IPluginConfigDo {
	return p.withDO(p.DO.Unscoped())
}

// Create ...
func (p pluginConfigDo) Create(values ...*model.PluginConfig) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

// CreateInBatches ...
func (p pluginConfigDo) CreateInBatches(values []*model.PluginConfig, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pluginConfigDo) Save(values ...*model.PluginConfig) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

// First ...
func (p pluginConfigDo) First() (*model.PluginConfig, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PluginConfig), nil
	}
}

// Take ...
func (p pluginConfigDo) Take() (*model.PluginConfig, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PluginConfig), nil
	}
}

// Last ...
func (p pluginConfigDo) Last() (*model.PluginConfig, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PluginConfig), nil
	}
}

// Find ...
func (p pluginConfigDo) Find() ([]*model.PluginConfig, error) {
	result, err := p.DO.Find()
	return result.([]*model.PluginConfig), err
}

// FindInBatch ...
func (p pluginConfigDo) FindInBatch(
	batchSize int,
	fc func(tx gen.Dao, batch int) error,
) (results []*model.PluginConfig, err error) {
	buf := make([]*model.PluginConfig, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

// FindInBatches ...
func (p pluginConfigDo) FindInBatches(
	result *[]*model.PluginConfig,
	batchSize int,
	fc func(tx gen.Dao, batch int) error,
) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

// Attrs ...
func (p pluginConfigDo) Attrs(attrs ...field.AssignExpr) IPluginConfigDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

// Assign ...
func (p pluginConfigDo) Assign(attrs ...field.AssignExpr) IPluginConfigDo {
	return p.withDO(p.DO.Assign(attrs...))
}

// Joins ...
func (p pluginConfigDo) Joins(fields ...field.RelationField) IPluginConfigDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

// Preload ...
func (p pluginConfigDo) Preload(fields ...field.RelationField) IPluginConfigDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

// FirstOrInit ...
func (p pluginConfigDo) FirstOrInit() (*model.PluginConfig, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PluginConfig), nil
	}
}

// FirstOrCreate ...
func (p pluginConfigDo) FirstOrCreate() (*model.PluginConfig, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PluginConfig), nil
	}
}

// FindByPage ...
func (p pluginConfigDo) FindByPage(offset int, limit int) (result []*model.PluginConfig, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

// ScanByPage ...
func (p pluginConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

// Scan ...
func (p pluginConfigDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

// Delete ...
func (p pluginConfigDo) Delete(models ...*model.PluginConfig) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pluginConfigDo) withDO(do gen.Dao) *pluginConfigDo {
	p.DO = *do.(*gen.DO)
	return p
}
