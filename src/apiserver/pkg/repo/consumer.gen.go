/*
 * TencentBlueKing is pleased to support the open source community by making
 * 蓝鲸智云 - 微网关(BlueKing - Micro APIGateway) available.
 * Copyright (C) 2025 Tencent. All rights reserved.
 * Licensed under the MIT License (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/MIT
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * We undertake not to change the open source license (MIT license) applicable
 * to the current version of the project delivered to anyone in the future.
 */

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/TencentBlueKing/blueking-micro-apigateway/apiserver/pkg/entity/model"
)

func newConsumer(db *gorm.DB, opts ...gen.DOOption) consumer {
	_consumer := consumer{}

	_consumer.consumerDo.UseDB(db, opts...)
	_consumer.consumerDo.UseModel(&model.Consumer{})

	tableName := _consumer.consumerDo.TableName()
	_consumer.ALL = field.NewAsterisk(tableName)
	_consumer.Username = field.NewString(tableName, "username")
	_consumer.GroupID = field.NewString(tableName, "group_id")
	_consumer.Creator = field.NewString(tableName, "creator")
	_consumer.Updater = field.NewString(tableName, "updater")
	_consumer.CreatedAt = field.NewTime(tableName, "created_at")
	_consumer.UpdatedAt = field.NewTime(tableName, "updated_at")
	_consumer.AutoID = field.NewInt(tableName, "auto_id")
	_consumer.ID = field.NewString(tableName, "id")
	_consumer.GatewayID = field.NewInt(tableName, "gateway_id")
	_consumer.Config = field.NewField(tableName, "config")
	_consumer.Status = field.NewString(tableName, "status")

	_consumer.fillFieldMap()

	return _consumer
}

type consumer struct {
	consumerDo consumerDo

	ALL       field.Asterisk
	Username  field.String
	GroupID   field.String
	Creator   field.String
	Updater   field.String
	CreatedAt field.Time
	UpdatedAt field.Time
	AutoID    field.Int
	ID        field.String
	GatewayID field.Int
	Config    field.Field
	Status    field.String

	fieldMap map[string]field.Expr
}

// Table ...
func (c consumer) Table(newTableName string) *consumer {
	c.consumerDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

// As ...
func (c consumer) As(alias string) *consumer {
	c.consumerDo.DO = *(c.consumerDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *consumer) updateTableName(table string) *consumer {
	c.ALL = field.NewAsterisk(table)
	c.Username = field.NewString(table, "username")
	c.GroupID = field.NewString(table, "group_id")
	c.Creator = field.NewString(table, "creator")
	c.Updater = field.NewString(table, "updater")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.AutoID = field.NewInt(table, "auto_id")
	c.ID = field.NewString(table, "id")
	c.GatewayID = field.NewInt(table, "gateway_id")
	c.Config = field.NewField(table, "config")
	c.Status = field.NewString(table, "status")

	c.fillFieldMap()

	return c
}

// WithContext ...
func (c *consumer) WithContext(ctx context.Context) IConsumerDo { return c.consumerDo.WithContext(ctx) }

// TableName ...
func (c consumer) TableName() string { return c.consumerDo.TableName() }

// Alias ...
func (c consumer) Alias() string { return c.consumerDo.Alias() }

// Columns ...
func (c consumer) Columns(cols ...field.Expr) gen.Columns { return c.consumerDo.Columns(cols...) }

// GetFieldByName ...
func (c *consumer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *consumer) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 11)
	c.fieldMap["username"] = c.Username
	c.fieldMap["group_id"] = c.GroupID
	c.fieldMap["creator"] = c.Creator
	c.fieldMap["updater"] = c.Updater
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["auto_id"] = c.AutoID
	c.fieldMap["id"] = c.ID
	c.fieldMap["gateway_id"] = c.GatewayID
	c.fieldMap["config"] = c.Config
	c.fieldMap["status"] = c.Status
}

func (c consumer) clone(db *gorm.DB) consumer {
	c.consumerDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c consumer) replaceDB(db *gorm.DB) consumer {
	c.consumerDo.ReplaceDB(db)
	return c
}

type consumerDo struct{ gen.DO }

// IConsumerDo ...
type IConsumerDo interface {
	gen.SubQuery
	Debug() IConsumerDo
	WithContext(ctx context.Context) IConsumerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IConsumerDo
	WriteDB() IConsumerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IConsumerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IConsumerDo
	Not(conds ...gen.Condition) IConsumerDo
	Or(conds ...gen.Condition) IConsumerDo
	Select(conds ...field.Expr) IConsumerDo
	Where(conds ...gen.Condition) IConsumerDo
	Order(conds ...field.Expr) IConsumerDo
	Distinct(cols ...field.Expr) IConsumerDo
	Omit(cols ...field.Expr) IConsumerDo
	Join(table schema.Tabler, on ...field.Expr) IConsumerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IConsumerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IConsumerDo
	Group(cols ...field.Expr) IConsumerDo
	Having(conds ...gen.Condition) IConsumerDo
	Limit(limit int) IConsumerDo
	Offset(offset int) IConsumerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IConsumerDo
	Unscoped() IConsumerDo
	Create(values ...*model.Consumer) error
	CreateInBatches(values []*model.Consumer, batchSize int) error
	Save(values ...*model.Consumer) error
	First() (*model.Consumer, error)
	Take() (*model.Consumer, error)
	Last() (*model.Consumer, error)
	Find() ([]*model.Consumer, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Consumer, err error)
	FindInBatches(result *[]*model.Consumer, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Consumer) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IConsumerDo
	Assign(attrs ...field.AssignExpr) IConsumerDo
	Joins(fields ...field.RelationField) IConsumerDo
	Preload(fields ...field.RelationField) IConsumerDo
	FirstOrInit() (*model.Consumer, error)
	FirstOrCreate() (*model.Consumer, error)
	FindByPage(offset int, limit int) (result []*model.Consumer, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IConsumerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

// Debug ...
func (c consumerDo) Debug() IConsumerDo {
	return c.withDO(c.DO.Debug())
}

// WithContext ...
func (c consumerDo) WithContext(ctx context.Context) IConsumerDo {
	return c.withDO(c.DO.WithContext(ctx))
}

// ReadDB ...
func (c consumerDo) ReadDB() IConsumerDo {
	return c.Clauses(dbresolver.Read)
}

// WriteDB ...
func (c consumerDo) WriteDB() IConsumerDo {
	return c.Clauses(dbresolver.Write)
}

// Session ...
func (c consumerDo) Session(config *gorm.Session) IConsumerDo {
	return c.withDO(c.DO.Session(config))
}

// Clauses ...
func (c consumerDo) Clauses(conds ...clause.Expression) IConsumerDo {
	return c.withDO(c.DO.Clauses(conds...))
}

// Returning ...
func (c consumerDo) Returning(value interface{}, columns ...string) IConsumerDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

// Not ...
func (c consumerDo) Not(conds ...gen.Condition) IConsumerDo {
	return c.withDO(c.DO.Not(conds...))
}

// Or ...
func (c consumerDo) Or(conds ...gen.Condition) IConsumerDo {
	return c.withDO(c.DO.Or(conds...))
}

// Select ...
func (c consumerDo) Select(conds ...field.Expr) IConsumerDo {
	return c.withDO(c.DO.Select(conds...))
}

// Where ...
func (c consumerDo) Where(conds ...gen.Condition) IConsumerDo {
	return c.withDO(c.DO.Where(conds...))
}

// Order ...
func (c consumerDo) Order(conds ...field.Expr) IConsumerDo {
	return c.withDO(c.DO.Order(conds...))
}

// Distinct ...
func (c consumerDo) Distinct(cols ...field.Expr) IConsumerDo {
	return c.withDO(c.DO.Distinct(cols...))
}

// Omit ...
func (c consumerDo) Omit(cols ...field.Expr) IConsumerDo {
	return c.withDO(c.DO.Omit(cols...))
}

// Join ...
func (c consumerDo) Join(table schema.Tabler, on ...field.Expr) IConsumerDo {
	return c.withDO(c.DO.Join(table, on...))
}

// LeftJoin ...
func (c consumerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IConsumerDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

// RightJoin ...
func (c consumerDo) RightJoin(table schema.Tabler, on ...field.Expr) IConsumerDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

// Group ...
func (c consumerDo) Group(cols ...field.Expr) IConsumerDo {
	return c.withDO(c.DO.Group(cols...))
}

// Having ...
func (c consumerDo) Having(conds ...gen.Condition) IConsumerDo {
	return c.withDO(c.DO.Having(conds...))
}

// Limit ...
func (c consumerDo) Limit(limit int) IConsumerDo {
	return c.withDO(c.DO.Limit(limit))
}

// Offset ...
func (c consumerDo) Offset(offset int) IConsumerDo {
	return c.withDO(c.DO.Offset(offset))
}

// Scopes ...
func (c consumerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IConsumerDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

// Unscoped ...
func (c consumerDo) Unscoped() IConsumerDo {
	return c.withDO(c.DO.Unscoped())
}

// Create ...
func (c consumerDo) Create(values ...*model.Consumer) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

// CreateInBatches ...
func (c consumerDo) CreateInBatches(values []*model.Consumer, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c consumerDo) Save(values ...*model.Consumer) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

// First ...
func (c consumerDo) First() (*model.Consumer, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Consumer), nil
	}
}

// Take ...
func (c consumerDo) Take() (*model.Consumer, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Consumer), nil
	}
}

// Last ...
func (c consumerDo) Last() (*model.Consumer, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Consumer), nil
	}
}

// Find ...
func (c consumerDo) Find() ([]*model.Consumer, error) {
	result, err := c.DO.Find()
	return result.([]*model.Consumer), err
}

// FindInBatch ...
func (c consumerDo) FindInBatch(
	batchSize int,
	fc func(tx gen.Dao, batch int) error,
) (results []*model.Consumer, err error) {
	buf := make([]*model.Consumer, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

// FindInBatches ...
func (c consumerDo) FindInBatches(
	result *[]*model.Consumer,
	batchSize int,
	fc func(tx gen.Dao, batch int) error,
) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

// Attrs ...
func (c consumerDo) Attrs(attrs ...field.AssignExpr) IConsumerDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

// Assign ...
func (c consumerDo) Assign(attrs ...field.AssignExpr) IConsumerDo {
	return c.withDO(c.DO.Assign(attrs...))
}

// Joins ...
func (c consumerDo) Joins(fields ...field.RelationField) IConsumerDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

// Preload ...
func (c consumerDo) Preload(fields ...field.RelationField) IConsumerDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

// FirstOrInit ...
func (c consumerDo) FirstOrInit() (*model.Consumer, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Consumer), nil
	}
}

// FirstOrCreate ...
func (c consumerDo) FirstOrCreate() (*model.Consumer, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Consumer), nil
	}
}

// FindByPage ...
func (c consumerDo) FindByPage(offset int, limit int) (result []*model.Consumer, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

// ScanByPage ...
func (c consumerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

// Scan ...
func (c consumerDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

// Delete ...
func (c consumerDo) Delete(models ...*model.Consumer) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *consumerDo) withDO(do gen.Dao) *consumerDo {
	c.DO = *do.(*gen.DO)
	return c
}
