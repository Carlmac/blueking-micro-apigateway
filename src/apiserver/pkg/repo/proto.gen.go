/*
 * TencentBlueKing is pleased to support the open source community by making
 * 蓝鲸智云 - 微网关(BlueKing - Micro APIGateway) available.
 * Copyright (C) 2025 Tencent. All rights reserved.
 * Licensed under the MIT License (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/MIT
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * We undertake not to change the open source license (MIT license) applicable
 * to the current version of the project delivered to anyone in the future.
 */

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/TencentBlueKing/blueking-micro-apigateway/apiserver/pkg/entity/model"
)

func newProto(db *gorm.DB, opts ...gen.DOOption) proto {
	_proto := proto{}

	_proto.protoDo.UseDB(db, opts...)
	_proto.protoDo.UseModel(&model.Proto{})

	tableName := _proto.protoDo.TableName()
	_proto.ALL = field.NewAsterisk(tableName)
	_proto.Name = field.NewString(tableName, "name")
	_proto.Creator = field.NewString(tableName, "creator")
	_proto.Updater = field.NewString(tableName, "updater")
	_proto.CreatedAt = field.NewTime(tableName, "created_at")
	_proto.UpdatedAt = field.NewTime(tableName, "updated_at")
	_proto.AutoID = field.NewInt(tableName, "auto_id")
	_proto.ID = field.NewString(tableName, "id")
	_proto.GatewayID = field.NewInt(tableName, "gateway_id")
	_proto.Config = field.NewField(tableName, "config")
	_proto.Status = field.NewString(tableName, "status")

	_proto.fillFieldMap()

	return _proto
}

type proto struct {
	protoDo protoDo

	ALL       field.Asterisk
	Name      field.String
	Creator   field.String
	Updater   field.String
	CreatedAt field.Time
	UpdatedAt field.Time
	AutoID    field.Int
	ID        field.String
	GatewayID field.Int
	Config    field.Field
	Status    field.String

	fieldMap map[string]field.Expr
}

// Table ...
func (p proto) Table(newTableName string) *proto {
	p.protoDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

// As ...
func (p proto) As(alias string) *proto {
	p.protoDo.DO = *(p.protoDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *proto) updateTableName(table string) *proto {
	p.ALL = field.NewAsterisk(table)
	p.Name = field.NewString(table, "name")
	p.Creator = field.NewString(table, "creator")
	p.Updater = field.NewString(table, "updater")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.AutoID = field.NewInt(table, "auto_id")
	p.ID = field.NewString(table, "id")
	p.GatewayID = field.NewInt(table, "gateway_id")
	p.Config = field.NewField(table, "config")
	p.Status = field.NewString(table, "status")

	p.fillFieldMap()

	return p
}

// WithContext ...
func (p *proto) WithContext(ctx context.Context) IProtoDo { return p.protoDo.WithContext(ctx) }

// TableName ...
func (p proto) TableName() string { return p.protoDo.TableName() }

// Alias ...
func (p proto) Alias() string { return p.protoDo.Alias() }

// Columns ...
func (p proto) Columns(cols ...field.Expr) gen.Columns { return p.protoDo.Columns(cols...) }

// GetFieldByName ...
func (p *proto) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *proto) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 10)
	p.fieldMap["name"] = p.Name
	p.fieldMap["creator"] = p.Creator
	p.fieldMap["updater"] = p.Updater
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["auto_id"] = p.AutoID
	p.fieldMap["id"] = p.ID
	p.fieldMap["gateway_id"] = p.GatewayID
	p.fieldMap["config"] = p.Config
	p.fieldMap["status"] = p.Status
}

func (p proto) clone(db *gorm.DB) proto {
	p.protoDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p proto) replaceDB(db *gorm.DB) proto {
	p.protoDo.ReplaceDB(db)
	return p
}

type protoDo struct{ gen.DO }

// IProtoDo ...
type IProtoDo interface {
	gen.SubQuery
	Debug() IProtoDo
	WithContext(ctx context.Context) IProtoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProtoDo
	WriteDB() IProtoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProtoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProtoDo
	Not(conds ...gen.Condition) IProtoDo
	Or(conds ...gen.Condition) IProtoDo
	Select(conds ...field.Expr) IProtoDo
	Where(conds ...gen.Condition) IProtoDo
	Order(conds ...field.Expr) IProtoDo
	Distinct(cols ...field.Expr) IProtoDo
	Omit(cols ...field.Expr) IProtoDo
	Join(table schema.Tabler, on ...field.Expr) IProtoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProtoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProtoDo
	Group(cols ...field.Expr) IProtoDo
	Having(conds ...gen.Condition) IProtoDo
	Limit(limit int) IProtoDo
	Offset(offset int) IProtoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProtoDo
	Unscoped() IProtoDo
	Create(values ...*model.Proto) error
	CreateInBatches(values []*model.Proto, batchSize int) error
	Save(values ...*model.Proto) error
	First() (*model.Proto, error)
	Take() (*model.Proto, error)
	Last() (*model.Proto, error)
	Find() ([]*model.Proto, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Proto, err error)
	FindInBatches(result *[]*model.Proto, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Proto) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProtoDo
	Assign(attrs ...field.AssignExpr) IProtoDo
	Joins(fields ...field.RelationField) IProtoDo
	Preload(fields ...field.RelationField) IProtoDo
	FirstOrInit() (*model.Proto, error)
	FirstOrCreate() (*model.Proto, error)
	FindByPage(offset int, limit int) (result []*model.Proto, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProtoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

// Debug ...
func (p protoDo) Debug() IProtoDo {
	return p.withDO(p.DO.Debug())
}

// WithContext ...
func (p protoDo) WithContext(ctx context.Context) IProtoDo {
	return p.withDO(p.DO.WithContext(ctx))
}

// ReadDB ...
func (p protoDo) ReadDB() IProtoDo {
	return p.Clauses(dbresolver.Read)
}

// WriteDB ...
func (p protoDo) WriteDB() IProtoDo {
	return p.Clauses(dbresolver.Write)
}

// Session ...
func (p protoDo) Session(config *gorm.Session) IProtoDo {
	return p.withDO(p.DO.Session(config))
}

// Clauses ...
func (p protoDo) Clauses(conds ...clause.Expression) IProtoDo {
	return p.withDO(p.DO.Clauses(conds...))
}

// Returning ...
func (p protoDo) Returning(value interface{}, columns ...string) IProtoDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

// Not ...
func (p protoDo) Not(conds ...gen.Condition) IProtoDo {
	return p.withDO(p.DO.Not(conds...))
}

// Or ...
func (p protoDo) Or(conds ...gen.Condition) IProtoDo {
	return p.withDO(p.DO.Or(conds...))
}

// Select ...
func (p protoDo) Select(conds ...field.Expr) IProtoDo {
	return p.withDO(p.DO.Select(conds...))
}

// Where ...
func (p protoDo) Where(conds ...gen.Condition) IProtoDo {
	return p.withDO(p.DO.Where(conds...))
}

// Order ...
func (p protoDo) Order(conds ...field.Expr) IProtoDo {
	return p.withDO(p.DO.Order(conds...))
}

// Distinct ...
func (p protoDo) Distinct(cols ...field.Expr) IProtoDo {
	return p.withDO(p.DO.Distinct(cols...))
}

// Omit ...
func (p protoDo) Omit(cols ...field.Expr) IProtoDo {
	return p.withDO(p.DO.Omit(cols...))
}

// Join ...
func (p protoDo) Join(table schema.Tabler, on ...field.Expr) IProtoDo {
	return p.withDO(p.DO.Join(table, on...))
}

// LeftJoin ...
func (p protoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProtoDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

// RightJoin ...
func (p protoDo) RightJoin(table schema.Tabler, on ...field.Expr) IProtoDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

// Group ...
func (p protoDo) Group(cols ...field.Expr) IProtoDo {
	return p.withDO(p.DO.Group(cols...))
}

// Having ...
func (p protoDo) Having(conds ...gen.Condition) IProtoDo {
	return p.withDO(p.DO.Having(conds...))
}

// Limit ...
func (p protoDo) Limit(limit int) IProtoDo {
	return p.withDO(p.DO.Limit(limit))
}

// Offset ...
func (p protoDo) Offset(offset int) IProtoDo {
	return p.withDO(p.DO.Offset(offset))
}

// Scopes ...
func (p protoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProtoDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

// Unscoped ...
func (p protoDo) Unscoped() IProtoDo {
	return p.withDO(p.DO.Unscoped())
}

// Create ...
func (p protoDo) Create(values ...*model.Proto) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

// CreateInBatches ...
func (p protoDo) CreateInBatches(values []*model.Proto, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p protoDo) Save(values ...*model.Proto) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

// First ...
func (p protoDo) First() (*model.Proto, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Proto), nil
	}
}

// Take ...
func (p protoDo) Take() (*model.Proto, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Proto), nil
	}
}

// Last ...
func (p protoDo) Last() (*model.Proto, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Proto), nil
	}
}

// Find ...
func (p protoDo) Find() ([]*model.Proto, error) {
	result, err := p.DO.Find()
	return result.([]*model.Proto), err
}

// FindInBatch ...
func (p protoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Proto, err error) {
	buf := make([]*model.Proto, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

// FindInBatches ...
func (p protoDo) FindInBatches(result *[]*model.Proto, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

// Attrs ...
func (p protoDo) Attrs(attrs ...field.AssignExpr) IProtoDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

// Assign ...
func (p protoDo) Assign(attrs ...field.AssignExpr) IProtoDo {
	return p.withDO(p.DO.Assign(attrs...))
}

// Joins ...
func (p protoDo) Joins(fields ...field.RelationField) IProtoDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

// Preload ...
func (p protoDo) Preload(fields ...field.RelationField) IProtoDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

// FirstOrInit ...
func (p protoDo) FirstOrInit() (*model.Proto, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Proto), nil
	}
}

// FirstOrCreate ...
func (p protoDo) FirstOrCreate() (*model.Proto, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Proto), nil
	}
}

// FindByPage ...
func (p protoDo) FindByPage(offset int, limit int) (result []*model.Proto, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

// ScanByPage ...
func (p protoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

// Scan ...
func (p protoDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

// Delete ...
func (p protoDo) Delete(models ...*model.Proto) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *protoDo) withDO(do gen.Dao) *protoDo {
	p.DO = *do.(*gen.DO)
	return p
}
