/*
 * TencentBlueKing is pleased to support the open source community by making
 * 蓝鲸智云 - 微网关(BlueKing - Micro APIGateway) available.
 * Copyright (C) 2025 Tencent. All rights reserved.
 * Licensed under the MIT License (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/MIT
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * We undertake not to change the open source license (MIT license) applicable
 * to the current version of the project delivered to anyone in the future.
 */

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/TencentBlueKing/blueking-micro-apigateway/apiserver/pkg/entity/model"
)

func newStreamRoute(db *gorm.DB, opts ...gen.DOOption) streamRoute {
	_streamRoute := streamRoute{}

	_streamRoute.streamRouteDo.UseDB(db, opts...)
	_streamRoute.streamRouteDo.UseModel(&model.StreamRoute{})

	tableName := _streamRoute.streamRouteDo.TableName()
	_streamRoute.ALL = field.NewAsterisk(tableName)
	_streamRoute.Name = field.NewString(tableName, "name")
	_streamRoute.ServiceID = field.NewString(tableName, "service_id")
	_streamRoute.UpstreamID = field.NewString(tableName, "upstream_id")
	_streamRoute.Creator = field.NewString(tableName, "creator")
	_streamRoute.Updater = field.NewString(tableName, "updater")
	_streamRoute.CreatedAt = field.NewTime(tableName, "created_at")
	_streamRoute.UpdatedAt = field.NewTime(tableName, "updated_at")
	_streamRoute.AutoID = field.NewInt(tableName, "auto_id")
	_streamRoute.ID = field.NewString(tableName, "id")
	_streamRoute.GatewayID = field.NewInt(tableName, "gateway_id")
	_streamRoute.Config = field.NewField(tableName, "config")
	_streamRoute.Status = field.NewString(tableName, "status")

	_streamRoute.fillFieldMap()

	return _streamRoute
}

type streamRoute struct {
	streamRouteDo streamRouteDo

	ALL        field.Asterisk
	Name       field.String
	ServiceID  field.String
	UpstreamID field.String
	Creator    field.String
	Updater    field.String
	CreatedAt  field.Time
	UpdatedAt  field.Time
	AutoID     field.Int
	ID         field.String
	GatewayID  field.Int
	Config     field.Field
	Status     field.String

	fieldMap map[string]field.Expr
}

// Table ...
func (s streamRoute) Table(newTableName string) *streamRoute {
	s.streamRouteDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

// As ...
func (s streamRoute) As(alias string) *streamRoute {
	s.streamRouteDo.DO = *(s.streamRouteDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *streamRoute) updateTableName(table string) *streamRoute {
	s.ALL = field.NewAsterisk(table)
	s.Name = field.NewString(table, "name")
	s.ServiceID = field.NewString(table, "service_id")
	s.UpstreamID = field.NewString(table, "upstream_id")
	s.Creator = field.NewString(table, "creator")
	s.Updater = field.NewString(table, "updater")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.AutoID = field.NewInt(table, "auto_id")
	s.ID = field.NewString(table, "id")
	s.GatewayID = field.NewInt(table, "gateway_id")
	s.Config = field.NewField(table, "config")
	s.Status = field.NewString(table, "status")

	s.fillFieldMap()

	return s
}

// WithContext ...
func (s *streamRoute) WithContext(ctx context.Context) IStreamRouteDo {
	return s.streamRouteDo.WithContext(ctx)
}

// TableName ...
func (s streamRoute) TableName() string { return s.streamRouteDo.TableName() }

// Alias ...
func (s streamRoute) Alias() string { return s.streamRouteDo.Alias() }

// Columns ...
func (s streamRoute) Columns(cols ...field.Expr) gen.Columns { return s.streamRouteDo.Columns(cols...) }

// GetFieldByName ...
func (s *streamRoute) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *streamRoute) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 12)
	s.fieldMap["name"] = s.Name
	s.fieldMap["service_id"] = s.ServiceID
	s.fieldMap["upstream_id"] = s.UpstreamID
	s.fieldMap["creator"] = s.Creator
	s.fieldMap["updater"] = s.Updater
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["auto_id"] = s.AutoID
	s.fieldMap["id"] = s.ID
	s.fieldMap["gateway_id"] = s.GatewayID
	s.fieldMap["config"] = s.Config
	s.fieldMap["status"] = s.Status
}

func (s streamRoute) clone(db *gorm.DB) streamRoute {
	s.streamRouteDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s streamRoute) replaceDB(db *gorm.DB) streamRoute {
	s.streamRouteDo.ReplaceDB(db)
	return s
}

type streamRouteDo struct{ gen.DO }

// IStreamRouteDo ...
type IStreamRouteDo interface {
	gen.SubQuery
	Debug() IStreamRouteDo
	WithContext(ctx context.Context) IStreamRouteDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStreamRouteDo
	WriteDB() IStreamRouteDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStreamRouteDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStreamRouteDo
	Not(conds ...gen.Condition) IStreamRouteDo
	Or(conds ...gen.Condition) IStreamRouteDo
	Select(conds ...field.Expr) IStreamRouteDo
	Where(conds ...gen.Condition) IStreamRouteDo
	Order(conds ...field.Expr) IStreamRouteDo
	Distinct(cols ...field.Expr) IStreamRouteDo
	Omit(cols ...field.Expr) IStreamRouteDo
	Join(table schema.Tabler, on ...field.Expr) IStreamRouteDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStreamRouteDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStreamRouteDo
	Group(cols ...field.Expr) IStreamRouteDo
	Having(conds ...gen.Condition) IStreamRouteDo
	Limit(limit int) IStreamRouteDo
	Offset(offset int) IStreamRouteDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStreamRouteDo
	Unscoped() IStreamRouteDo
	Create(values ...*model.StreamRoute) error
	CreateInBatches(values []*model.StreamRoute, batchSize int) error
	Save(values ...*model.StreamRoute) error
	First() (*model.StreamRoute, error)
	Take() (*model.StreamRoute, error)
	Last() (*model.StreamRoute, error)
	Find() ([]*model.StreamRoute, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StreamRoute, err error)
	FindInBatches(result *[]*model.StreamRoute, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.StreamRoute) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStreamRouteDo
	Assign(attrs ...field.AssignExpr) IStreamRouteDo
	Joins(fields ...field.RelationField) IStreamRouteDo
	Preload(fields ...field.RelationField) IStreamRouteDo
	FirstOrInit() (*model.StreamRoute, error)
	FirstOrCreate() (*model.StreamRoute, error)
	FindByPage(offset int, limit int) (result []*model.StreamRoute, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStreamRouteDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

// Debug ...
func (s streamRouteDo) Debug() IStreamRouteDo {
	return s.withDO(s.DO.Debug())
}

// WithContext ...
func (s streamRouteDo) WithContext(ctx context.Context) IStreamRouteDo {
	return s.withDO(s.DO.WithContext(ctx))
}

// ReadDB ...
func (s streamRouteDo) ReadDB() IStreamRouteDo {
	return s.Clauses(dbresolver.Read)
}

// WriteDB ...
func (s streamRouteDo) WriteDB() IStreamRouteDo {
	return s.Clauses(dbresolver.Write)
}

// Session ...
func (s streamRouteDo) Session(config *gorm.Session) IStreamRouteDo {
	return s.withDO(s.DO.Session(config))
}

// Clauses ...
func (s streamRouteDo) Clauses(conds ...clause.Expression) IStreamRouteDo {
	return s.withDO(s.DO.Clauses(conds...))
}

// Returning ...
func (s streamRouteDo) Returning(value interface{}, columns ...string) IStreamRouteDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

// Not ...
func (s streamRouteDo) Not(conds ...gen.Condition) IStreamRouteDo {
	return s.withDO(s.DO.Not(conds...))
}

// Or ...
func (s streamRouteDo) Or(conds ...gen.Condition) IStreamRouteDo {
	return s.withDO(s.DO.Or(conds...))
}

// Select ...
func (s streamRouteDo) Select(conds ...field.Expr) IStreamRouteDo {
	return s.withDO(s.DO.Select(conds...))
}

// Where ...
func (s streamRouteDo) Where(conds ...gen.Condition) IStreamRouteDo {
	return s.withDO(s.DO.Where(conds...))
}

// Order ...
func (s streamRouteDo) Order(conds ...field.Expr) IStreamRouteDo {
	return s.withDO(s.DO.Order(conds...))
}

// Distinct ...
func (s streamRouteDo) Distinct(cols ...field.Expr) IStreamRouteDo {
	return s.withDO(s.DO.Distinct(cols...))
}

// Omit ...
func (s streamRouteDo) Omit(cols ...field.Expr) IStreamRouteDo {
	return s.withDO(s.DO.Omit(cols...))
}

// Join ...
func (s streamRouteDo) Join(table schema.Tabler, on ...field.Expr) IStreamRouteDo {
	return s.withDO(s.DO.Join(table, on...))
}

// LeftJoin ...
func (s streamRouteDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStreamRouteDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

// RightJoin ...
func (s streamRouteDo) RightJoin(table schema.Tabler, on ...field.Expr) IStreamRouteDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

// Group ...
func (s streamRouteDo) Group(cols ...field.Expr) IStreamRouteDo {
	return s.withDO(s.DO.Group(cols...))
}

// Having ...
func (s streamRouteDo) Having(conds ...gen.Condition) IStreamRouteDo {
	return s.withDO(s.DO.Having(conds...))
}

// Limit ...
func (s streamRouteDo) Limit(limit int) IStreamRouteDo {
	return s.withDO(s.DO.Limit(limit))
}

// Offset ...
func (s streamRouteDo) Offset(offset int) IStreamRouteDo {
	return s.withDO(s.DO.Offset(offset))
}

// Scopes ...
func (s streamRouteDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStreamRouteDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

// Unscoped ...
func (s streamRouteDo) Unscoped() IStreamRouteDo {
	return s.withDO(s.DO.Unscoped())
}

// Create ...
func (s streamRouteDo) Create(values ...*model.StreamRoute) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

// CreateInBatches ...
func (s streamRouteDo) CreateInBatches(values []*model.StreamRoute, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s streamRouteDo) Save(values ...*model.StreamRoute) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

// First ...
func (s streamRouteDo) First() (*model.StreamRoute, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.StreamRoute), nil
	}
}

// Take ...
func (s streamRouteDo) Take() (*model.StreamRoute, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.StreamRoute), nil
	}
}

// Last ...
func (s streamRouteDo) Last() (*model.StreamRoute, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.StreamRoute), nil
	}
}

// Find ...
func (s streamRouteDo) Find() ([]*model.StreamRoute, error) {
	result, err := s.DO.Find()
	return result.([]*model.StreamRoute), err
}

// FindInBatch ...
func (s streamRouteDo) FindInBatch(
	batchSize int,
	fc func(tx gen.Dao, batch int) error,
) (results []*model.StreamRoute, err error) {
	buf := make([]*model.StreamRoute, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

// FindInBatches ...
func (s streamRouteDo) FindInBatches(
	result *[]*model.StreamRoute,
	batchSize int,
	fc func(tx gen.Dao, batch int) error,
) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

// Attrs ...
func (s streamRouteDo) Attrs(attrs ...field.AssignExpr) IStreamRouteDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

// Assign ...
func (s streamRouteDo) Assign(attrs ...field.AssignExpr) IStreamRouteDo {
	return s.withDO(s.DO.Assign(attrs...))
}

// Joins ...
func (s streamRouteDo) Joins(fields ...field.RelationField) IStreamRouteDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

// Preload ...
func (s streamRouteDo) Preload(fields ...field.RelationField) IStreamRouteDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

// FirstOrInit ...
func (s streamRouteDo) FirstOrInit() (*model.StreamRoute, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.StreamRoute), nil
	}
}

// FirstOrCreate ...
func (s streamRouteDo) FirstOrCreate() (*model.StreamRoute, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.StreamRoute), nil
	}
}

// FindByPage ...
func (s streamRouteDo) FindByPage(offset int, limit int) (result []*model.StreamRoute, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

// ScanByPage ...
func (s streamRouteDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

// Scan ...
func (s streamRouteDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

// Delete ...
func (s streamRouteDo) Delete(models ...*model.StreamRoute) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *streamRouteDo) withDO(do gen.Dao) *streamRouteDo {
	s.DO = *do.(*gen.DO)
	return s
}
