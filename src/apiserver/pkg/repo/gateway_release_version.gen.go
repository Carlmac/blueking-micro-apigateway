/*
 * TencentBlueKing is pleased to support the open source community by making
 * 蓝鲸智云 - 微网关(BlueKing - Micro APIGateway) available.
 * Copyright (C) 2025 Tencent. All rights reserved.
 * Licensed under the MIT License (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/MIT
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * We undertake not to change the open source license (MIT license) applicable
 * to the current version of the project delivered to anyone in the future.
 */

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/TencentBlueKing/blueking-micro-apigateway/apiserver/pkg/entity/model"
)

func newGatewayReleaseVersion(db *gorm.DB, opts ...gen.DOOption) gatewayReleaseVersion {
	_gatewayReleaseVersion := gatewayReleaseVersion{}

	_gatewayReleaseVersion.gatewayReleaseVersionDo.UseDB(db, opts...)
	_gatewayReleaseVersion.gatewayReleaseVersionDo.UseModel(&model.GatewayReleaseVersion{})

	tableName := _gatewayReleaseVersion.gatewayReleaseVersionDo.TableName()
	_gatewayReleaseVersion.ALL = field.NewAsterisk(tableName)
	_gatewayReleaseVersion.ID = field.NewInt64(tableName, "id")
	_gatewayReleaseVersion.GatewayID = field.NewString(tableName, "gateway_id")
	_gatewayReleaseVersion.ReleaseData = field.NewField(tableName, "release_data")
	_gatewayReleaseVersion.Version = field.NewString(tableName, "version")
	_gatewayReleaseVersion.Creator = field.NewString(tableName, "creator")
	_gatewayReleaseVersion.Updater = field.NewString(tableName, "updater")
	_gatewayReleaseVersion.CreatedAt = field.NewTime(tableName, "created_at")
	_gatewayReleaseVersion.UpdatedAt = field.NewTime(tableName, "updated_at")

	_gatewayReleaseVersion.fillFieldMap()

	return _gatewayReleaseVersion
}

type gatewayReleaseVersion struct {
	gatewayReleaseVersionDo gatewayReleaseVersionDo

	ALL         field.Asterisk
	ID          field.Int64
	GatewayID   field.String
	ReleaseData field.Field
	Version     field.String
	Creator     field.String
	Updater     field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time

	fieldMap map[string]field.Expr
}

// Table ...
func (g gatewayReleaseVersion) Table(newTableName string) *gatewayReleaseVersion {
	g.gatewayReleaseVersionDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

// As ...
func (g gatewayReleaseVersion) As(alias string) *gatewayReleaseVersion {
	g.gatewayReleaseVersionDo.DO = *(g.gatewayReleaseVersionDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gatewayReleaseVersion) updateTableName(table string) *gatewayReleaseVersion {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.GatewayID = field.NewString(table, "gateway_id")
	g.ReleaseData = field.NewField(table, "release_data")
	g.Version = field.NewString(table, "version")
	g.Creator = field.NewString(table, "creator")
	g.Updater = field.NewString(table, "updater")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")

	g.fillFieldMap()

	return g
}

// WithContext ...
func (g *gatewayReleaseVersion) WithContext(ctx context.Context) IGatewayReleaseVersionDo {
	return g.gatewayReleaseVersionDo.WithContext(ctx)
}

// TableName ...
func (g gatewayReleaseVersion) TableName() string { return g.gatewayReleaseVersionDo.TableName() }

// Alias ...
func (g gatewayReleaseVersion) Alias() string { return g.gatewayReleaseVersionDo.Alias() }

// Columns ...
func (g gatewayReleaseVersion) Columns(cols ...field.Expr) gen.Columns {
	return g.gatewayReleaseVersionDo.Columns(cols...)
}

// GetFieldByName ...
func (g *gatewayReleaseVersion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gatewayReleaseVersion) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 8)
	g.fieldMap["id"] = g.ID
	g.fieldMap["gateway_id"] = g.GatewayID
	g.fieldMap["release_data"] = g.ReleaseData
	g.fieldMap["version"] = g.Version
	g.fieldMap["creator"] = g.Creator
	g.fieldMap["updater"] = g.Updater
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
}

func (g gatewayReleaseVersion) clone(db *gorm.DB) gatewayReleaseVersion {
	g.gatewayReleaseVersionDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gatewayReleaseVersion) replaceDB(db *gorm.DB) gatewayReleaseVersion {
	g.gatewayReleaseVersionDo.ReplaceDB(db)
	return g
}

type gatewayReleaseVersionDo struct{ gen.DO }

// IGatewayReleaseVersionDo ...
type IGatewayReleaseVersionDo interface {
	gen.SubQuery
	Debug() IGatewayReleaseVersionDo
	WithContext(ctx context.Context) IGatewayReleaseVersionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGatewayReleaseVersionDo
	WriteDB() IGatewayReleaseVersionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGatewayReleaseVersionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGatewayReleaseVersionDo
	Not(conds ...gen.Condition) IGatewayReleaseVersionDo
	Or(conds ...gen.Condition) IGatewayReleaseVersionDo
	Select(conds ...field.Expr) IGatewayReleaseVersionDo
	Where(conds ...gen.Condition) IGatewayReleaseVersionDo
	Order(conds ...field.Expr) IGatewayReleaseVersionDo
	Distinct(cols ...field.Expr) IGatewayReleaseVersionDo
	Omit(cols ...field.Expr) IGatewayReleaseVersionDo
	Join(table schema.Tabler, on ...field.Expr) IGatewayReleaseVersionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGatewayReleaseVersionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGatewayReleaseVersionDo
	Group(cols ...field.Expr) IGatewayReleaseVersionDo
	Having(conds ...gen.Condition) IGatewayReleaseVersionDo
	Limit(limit int) IGatewayReleaseVersionDo
	Offset(offset int) IGatewayReleaseVersionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGatewayReleaseVersionDo
	Unscoped() IGatewayReleaseVersionDo
	Create(values ...*model.GatewayReleaseVersion) error
	CreateInBatches(values []*model.GatewayReleaseVersion, batchSize int) error
	Save(values ...*model.GatewayReleaseVersion) error
	First() (*model.GatewayReleaseVersion, error)
	Take() (*model.GatewayReleaseVersion, error)
	Last() (*model.GatewayReleaseVersion, error)
	Find() ([]*model.GatewayReleaseVersion, error)
	FindInBatch(
		batchSize int,
		fc func(tx gen.Dao, batch int) error,
	) (results []*model.GatewayReleaseVersion, err error)
	FindInBatches(result *[]*model.GatewayReleaseVersion, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GatewayReleaseVersion) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGatewayReleaseVersionDo
	Assign(attrs ...field.AssignExpr) IGatewayReleaseVersionDo
	Joins(fields ...field.RelationField) IGatewayReleaseVersionDo
	Preload(fields ...field.RelationField) IGatewayReleaseVersionDo
	FirstOrInit() (*model.GatewayReleaseVersion, error)
	FirstOrCreate() (*model.GatewayReleaseVersion, error)
	FindByPage(offset int, limit int) (result []*model.GatewayReleaseVersion, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGatewayReleaseVersionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

// Debug ...
func (g gatewayReleaseVersionDo) Debug() IGatewayReleaseVersionDo {
	return g.withDO(g.DO.Debug())
}

// WithContext ...
func (g gatewayReleaseVersionDo) WithContext(ctx context.Context) IGatewayReleaseVersionDo {
	return g.withDO(g.DO.WithContext(ctx))
}

// ReadDB ...
func (g gatewayReleaseVersionDo) ReadDB() IGatewayReleaseVersionDo {
	return g.Clauses(dbresolver.Read)
}

// WriteDB ...
func (g gatewayReleaseVersionDo) WriteDB() IGatewayReleaseVersionDo {
	return g.Clauses(dbresolver.Write)
}

// Session ...
func (g gatewayReleaseVersionDo) Session(config *gorm.Session) IGatewayReleaseVersionDo {
	return g.withDO(g.DO.Session(config))
}

// Clauses ...
func (g gatewayReleaseVersionDo) Clauses(conds ...clause.Expression) IGatewayReleaseVersionDo {
	return g.withDO(g.DO.Clauses(conds...))
}

// Returning ...
func (g gatewayReleaseVersionDo) Returning(value interface{}, columns ...string) IGatewayReleaseVersionDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

// Not ...
func (g gatewayReleaseVersionDo) Not(conds ...gen.Condition) IGatewayReleaseVersionDo {
	return g.withDO(g.DO.Not(conds...))
}

// Or ...
func (g gatewayReleaseVersionDo) Or(conds ...gen.Condition) IGatewayReleaseVersionDo {
	return g.withDO(g.DO.Or(conds...))
}

// Select ...
func (g gatewayReleaseVersionDo) Select(conds ...field.Expr) IGatewayReleaseVersionDo {
	return g.withDO(g.DO.Select(conds...))
}

// Where ...
func (g gatewayReleaseVersionDo) Where(conds ...gen.Condition) IGatewayReleaseVersionDo {
	return g.withDO(g.DO.Where(conds...))
}

// Order ...
func (g gatewayReleaseVersionDo) Order(conds ...field.Expr) IGatewayReleaseVersionDo {
	return g.withDO(g.DO.Order(conds...))
}

// Distinct ...
func (g gatewayReleaseVersionDo) Distinct(cols ...field.Expr) IGatewayReleaseVersionDo {
	return g.withDO(g.DO.Distinct(cols...))
}

// Omit ...
func (g gatewayReleaseVersionDo) Omit(cols ...field.Expr) IGatewayReleaseVersionDo {
	return g.withDO(g.DO.Omit(cols...))
}

// Join ...
func (g gatewayReleaseVersionDo) Join(table schema.Tabler, on ...field.Expr) IGatewayReleaseVersionDo {
	return g.withDO(g.DO.Join(table, on...))
}

// LeftJoin ...
func (g gatewayReleaseVersionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGatewayReleaseVersionDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

// RightJoin ...
func (g gatewayReleaseVersionDo) RightJoin(table schema.Tabler, on ...field.Expr) IGatewayReleaseVersionDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

// Group ...
func (g gatewayReleaseVersionDo) Group(cols ...field.Expr) IGatewayReleaseVersionDo {
	return g.withDO(g.DO.Group(cols...))
}

// Having ...
func (g gatewayReleaseVersionDo) Having(conds ...gen.Condition) IGatewayReleaseVersionDo {
	return g.withDO(g.DO.Having(conds...))
}

// Limit ...
func (g gatewayReleaseVersionDo) Limit(limit int) IGatewayReleaseVersionDo {
	return g.withDO(g.DO.Limit(limit))
}

// Offset ...
func (g gatewayReleaseVersionDo) Offset(offset int) IGatewayReleaseVersionDo {
	return g.withDO(g.DO.Offset(offset))
}

// Scopes ...
func (g gatewayReleaseVersionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGatewayReleaseVersionDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

// Unscoped ...
func (g gatewayReleaseVersionDo) Unscoped() IGatewayReleaseVersionDo {
	return g.withDO(g.DO.Unscoped())
}

// Create ...
func (g gatewayReleaseVersionDo) Create(values ...*model.GatewayReleaseVersion) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

// CreateInBatches ...
func (g gatewayReleaseVersionDo) CreateInBatches(values []*model.GatewayReleaseVersion, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gatewayReleaseVersionDo) Save(values ...*model.GatewayReleaseVersion) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

// First ...
func (g gatewayReleaseVersionDo) First() (*model.GatewayReleaseVersion, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayReleaseVersion), nil
	}
}

// Take ...
func (g gatewayReleaseVersionDo) Take() (*model.GatewayReleaseVersion, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayReleaseVersion), nil
	}
}

// Last ...
func (g gatewayReleaseVersionDo) Last() (*model.GatewayReleaseVersion, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayReleaseVersion), nil
	}
}

// Find ...
func (g gatewayReleaseVersionDo) Find() ([]*model.GatewayReleaseVersion, error) {
	result, err := g.DO.Find()
	return result.([]*model.GatewayReleaseVersion), err
}

// FindInBatch ...
func (g gatewayReleaseVersionDo) FindInBatch(
	batchSize int,
	fc func(tx gen.Dao, batch int) error,
) (results []*model.GatewayReleaseVersion, err error) {
	buf := make([]*model.GatewayReleaseVersion, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

// FindInBatches ...
func (g gatewayReleaseVersionDo) FindInBatches(
	result *[]*model.GatewayReleaseVersion,
	batchSize int,
	fc func(tx gen.Dao, batch int) error,
) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

// Attrs ...
func (g gatewayReleaseVersionDo) Attrs(attrs ...field.AssignExpr) IGatewayReleaseVersionDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

// Assign ...
func (g gatewayReleaseVersionDo) Assign(attrs ...field.AssignExpr) IGatewayReleaseVersionDo {
	return g.withDO(g.DO.Assign(attrs...))
}

// Joins ...
func (g gatewayReleaseVersionDo) Joins(fields ...field.RelationField) IGatewayReleaseVersionDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

// Preload ...
func (g gatewayReleaseVersionDo) Preload(fields ...field.RelationField) IGatewayReleaseVersionDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

// FirstOrInit ...
func (g gatewayReleaseVersionDo) FirstOrInit() (*model.GatewayReleaseVersion, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayReleaseVersion), nil
	}
}

// FirstOrCreate ...
func (g gatewayReleaseVersionDo) FirstOrCreate() (*model.GatewayReleaseVersion, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayReleaseVersion), nil
	}
}

// FindByPage ...
func (g gatewayReleaseVersionDo) FindByPage(
	offset int,
	limit int,
) (result []*model.GatewayReleaseVersion, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

// ScanByPage ...
func (g gatewayReleaseVersionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

// Scan ...
func (g gatewayReleaseVersionDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

// Delete ...
func (g gatewayReleaseVersionDo) Delete(models ...*model.GatewayReleaseVersion) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gatewayReleaseVersionDo) withDO(do gen.Dao) *gatewayReleaseVersionDo {
	g.DO = *do.(*gen.DO)
	return g
}
