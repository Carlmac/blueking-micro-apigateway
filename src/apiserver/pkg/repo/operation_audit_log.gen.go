/*
 * TencentBlueKing is pleased to support the open source community by making
 * 蓝鲸智云 - 微网关(BlueKing - Micro APIGateway) available.
 * Copyright (C) 2025 Tencent. All rights reserved.
 * Licensed under the MIT License (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/MIT
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * We undertake not to change the open source license (MIT license) applicable
 * to the current version of the project delivered to anyone in the future.
 */

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/TencentBlueKing/blueking-micro-apigateway/apiserver/pkg/entity/model"
)

func newOperationAuditLog(db *gorm.DB, opts ...gen.DOOption) operationAuditLog {
	_operationAuditLog := operationAuditLog{}

	_operationAuditLog.operationAuditLogDo.UseDB(db, opts...)
	_operationAuditLog.operationAuditLogDo.UseModel(&model.OperationAuditLog{})

	tableName := _operationAuditLog.operationAuditLogDo.TableName()
	_operationAuditLog.ALL = field.NewAsterisk(tableName)
	_operationAuditLog.ID = field.NewInt(tableName, "id")
	_operationAuditLog.GatewayID = field.NewInt(tableName, "gateway_id")
	_operationAuditLog.CreatedAt = field.NewTime(tableName, "created_at")
	_operationAuditLog.OperationType = field.NewString(tableName, "operation_type")
	_operationAuditLog.Operator = field.NewString(tableName, "operator")
	_operationAuditLog.ResourceIDs = field.NewString(tableName, "resource_ids")
	_operationAuditLog.ResourceType = field.NewString(tableName, "resource_type")
	_operationAuditLog.DataBefore = field.NewField(tableName, "data_before")
	_operationAuditLog.DataAfter = field.NewField(tableName, "data_after")

	_operationAuditLog.fillFieldMap()

	return _operationAuditLog
}

type operationAuditLog struct {
	operationAuditLogDo operationAuditLogDo

	ALL           field.Asterisk
	ID            field.Int
	GatewayID     field.Int
	CreatedAt     field.Time
	OperationType field.String
	Operator      field.String
	ResourceIDs   field.String
	ResourceType  field.String
	DataBefore    field.Field
	DataAfter     field.Field

	fieldMap map[string]field.Expr
}

// Table ...
func (o operationAuditLog) Table(newTableName string) *operationAuditLog {
	o.operationAuditLogDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

// As ...
func (o operationAuditLog) As(alias string) *operationAuditLog {
	o.operationAuditLogDo.DO = *(o.operationAuditLogDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *operationAuditLog) updateTableName(table string) *operationAuditLog {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt(table, "id")
	o.GatewayID = field.NewInt(table, "gateway_id")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.OperationType = field.NewString(table, "operation_type")
	o.Operator = field.NewString(table, "operator")
	o.ResourceIDs = field.NewString(table, "resource_ids")
	o.ResourceType = field.NewString(table, "resource_type")
	o.DataBefore = field.NewField(table, "data_before")
	o.DataAfter = field.NewField(table, "data_after")

	o.fillFieldMap()

	return o
}

// WithContext ...
func (o *operationAuditLog) WithContext(ctx context.Context) IOperationAuditLogDo {
	return o.operationAuditLogDo.WithContext(ctx)
}

// TableName ...
func (o operationAuditLog) TableName() string { return o.operationAuditLogDo.TableName() }

// Alias ...
func (o operationAuditLog) Alias() string { return o.operationAuditLogDo.Alias() }

// Columns ...
func (o operationAuditLog) Columns(cols ...field.Expr) gen.Columns {
	return o.operationAuditLogDo.Columns(cols...)
}

// GetFieldByName ...
func (o *operationAuditLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *operationAuditLog) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 9)
	o.fieldMap["id"] = o.ID
	o.fieldMap["gateway_id"] = o.GatewayID
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["operation_type"] = o.OperationType
	o.fieldMap["operator"] = o.Operator
	o.fieldMap["resource_ids"] = o.ResourceIDs
	o.fieldMap["resource_type"] = o.ResourceType
	o.fieldMap["data_before"] = o.DataBefore
	o.fieldMap["data_after"] = o.DataAfter
}

func (o operationAuditLog) clone(db *gorm.DB) operationAuditLog {
	o.operationAuditLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o operationAuditLog) replaceDB(db *gorm.DB) operationAuditLog {
	o.operationAuditLogDo.ReplaceDB(db)
	return o
}

type operationAuditLogDo struct{ gen.DO }

// IOperationAuditLogDo ...
type IOperationAuditLogDo interface {
	gen.SubQuery
	Debug() IOperationAuditLogDo
	WithContext(ctx context.Context) IOperationAuditLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOperationAuditLogDo
	WriteDB() IOperationAuditLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOperationAuditLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOperationAuditLogDo
	Not(conds ...gen.Condition) IOperationAuditLogDo
	Or(conds ...gen.Condition) IOperationAuditLogDo
	Select(conds ...field.Expr) IOperationAuditLogDo
	Where(conds ...gen.Condition) IOperationAuditLogDo
	Order(conds ...field.Expr) IOperationAuditLogDo
	Distinct(cols ...field.Expr) IOperationAuditLogDo
	Omit(cols ...field.Expr) IOperationAuditLogDo
	Join(table schema.Tabler, on ...field.Expr) IOperationAuditLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOperationAuditLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOperationAuditLogDo
	Group(cols ...field.Expr) IOperationAuditLogDo
	Having(conds ...gen.Condition) IOperationAuditLogDo
	Limit(limit int) IOperationAuditLogDo
	Offset(offset int) IOperationAuditLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOperationAuditLogDo
	Unscoped() IOperationAuditLogDo
	Create(values ...*model.OperationAuditLog) error
	CreateInBatches(values []*model.OperationAuditLog, batchSize int) error
	Save(values ...*model.OperationAuditLog) error
	First() (*model.OperationAuditLog, error)
	Take() (*model.OperationAuditLog, error)
	Last() (*model.OperationAuditLog, error)
	Find() ([]*model.OperationAuditLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OperationAuditLog, err error)
	FindInBatches(result *[]*model.OperationAuditLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OperationAuditLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOperationAuditLogDo
	Assign(attrs ...field.AssignExpr) IOperationAuditLogDo
	Joins(fields ...field.RelationField) IOperationAuditLogDo
	Preload(fields ...field.RelationField) IOperationAuditLogDo
	FirstOrInit() (*model.OperationAuditLog, error)
	FirstOrCreate() (*model.OperationAuditLog, error)
	FindByPage(offset int, limit int) (result []*model.OperationAuditLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOperationAuditLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

// Debug ...
func (o operationAuditLogDo) Debug() IOperationAuditLogDo {
	return o.withDO(o.DO.Debug())
}

// WithContext ...
func (o operationAuditLogDo) WithContext(ctx context.Context) IOperationAuditLogDo {
	return o.withDO(o.DO.WithContext(ctx))
}

// ReadDB ...
func (o operationAuditLogDo) ReadDB() IOperationAuditLogDo {
	return o.Clauses(dbresolver.Read)
}

// WriteDB ...
func (o operationAuditLogDo) WriteDB() IOperationAuditLogDo {
	return o.Clauses(dbresolver.Write)
}

// Session ...
func (o operationAuditLogDo) Session(config *gorm.Session) IOperationAuditLogDo {
	return o.withDO(o.DO.Session(config))
}

// Clauses ...
func (o operationAuditLogDo) Clauses(conds ...clause.Expression) IOperationAuditLogDo {
	return o.withDO(o.DO.Clauses(conds...))
}

// Returning ...
func (o operationAuditLogDo) Returning(value interface{}, columns ...string) IOperationAuditLogDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

// Not ...
func (o operationAuditLogDo) Not(conds ...gen.Condition) IOperationAuditLogDo {
	return o.withDO(o.DO.Not(conds...))
}

// Or ...
func (o operationAuditLogDo) Or(conds ...gen.Condition) IOperationAuditLogDo {
	return o.withDO(o.DO.Or(conds...))
}

// Select ...
func (o operationAuditLogDo) Select(conds ...field.Expr) IOperationAuditLogDo {
	return o.withDO(o.DO.Select(conds...))
}

// Where ...
func (o operationAuditLogDo) Where(conds ...gen.Condition) IOperationAuditLogDo {
	return o.withDO(o.DO.Where(conds...))
}

// Order ...
func (o operationAuditLogDo) Order(conds ...field.Expr) IOperationAuditLogDo {
	return o.withDO(o.DO.Order(conds...))
}

// Distinct ...
func (o operationAuditLogDo) Distinct(cols ...field.Expr) IOperationAuditLogDo {
	return o.withDO(o.DO.Distinct(cols...))
}

// Omit ...
func (o operationAuditLogDo) Omit(cols ...field.Expr) IOperationAuditLogDo {
	return o.withDO(o.DO.Omit(cols...))
}

// Join ...
func (o operationAuditLogDo) Join(table schema.Tabler, on ...field.Expr) IOperationAuditLogDo {
	return o.withDO(o.DO.Join(table, on...))
}

// LeftJoin ...
func (o operationAuditLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOperationAuditLogDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

// RightJoin ...
func (o operationAuditLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IOperationAuditLogDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

// Group ...
func (o operationAuditLogDo) Group(cols ...field.Expr) IOperationAuditLogDo {
	return o.withDO(o.DO.Group(cols...))
}

// Having ...
func (o operationAuditLogDo) Having(conds ...gen.Condition) IOperationAuditLogDo {
	return o.withDO(o.DO.Having(conds...))
}

// Limit ...
func (o operationAuditLogDo) Limit(limit int) IOperationAuditLogDo {
	return o.withDO(o.DO.Limit(limit))
}

// Offset ...
func (o operationAuditLogDo) Offset(offset int) IOperationAuditLogDo {
	return o.withDO(o.DO.Offset(offset))
}

// Scopes ...
func (o operationAuditLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOperationAuditLogDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

// Unscoped ...
func (o operationAuditLogDo) Unscoped() IOperationAuditLogDo {
	return o.withDO(o.DO.Unscoped())
}

// Create ...
func (o operationAuditLogDo) Create(values ...*model.OperationAuditLog) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

// CreateInBatches ...
func (o operationAuditLogDo) CreateInBatches(values []*model.OperationAuditLog, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o operationAuditLogDo) Save(values ...*model.OperationAuditLog) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

// First ...
func (o operationAuditLogDo) First() (*model.OperationAuditLog, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OperationAuditLog), nil
	}
}

// Take ...
func (o operationAuditLogDo) Take() (*model.OperationAuditLog, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OperationAuditLog), nil
	}
}

// Last ...
func (o operationAuditLogDo) Last() (*model.OperationAuditLog, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OperationAuditLog), nil
	}
}

// Find ...
func (o operationAuditLogDo) Find() ([]*model.OperationAuditLog, error) {
	result, err := o.DO.Find()
	return result.([]*model.OperationAuditLog), err
}

// FindInBatch ...
func (o operationAuditLogDo) FindInBatch(
	batchSize int,
	fc func(tx gen.Dao, batch int) error,
) (results []*model.OperationAuditLog, err error) {
	buf := make([]*model.OperationAuditLog, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

// FindInBatches ...
func (o operationAuditLogDo) FindInBatches(
	result *[]*model.OperationAuditLog,
	batchSize int,
	fc func(tx gen.Dao, batch int) error,
) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

// Attrs ...
func (o operationAuditLogDo) Attrs(attrs ...field.AssignExpr) IOperationAuditLogDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

// Assign ...
func (o operationAuditLogDo) Assign(attrs ...field.AssignExpr) IOperationAuditLogDo {
	return o.withDO(o.DO.Assign(attrs...))
}

// Joins ...
func (o operationAuditLogDo) Joins(fields ...field.RelationField) IOperationAuditLogDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

// Preload ...
func (o operationAuditLogDo) Preload(fields ...field.RelationField) IOperationAuditLogDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

// FirstOrInit ...
func (o operationAuditLogDo) FirstOrInit() (*model.OperationAuditLog, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OperationAuditLog), nil
	}
}

// FirstOrCreate ...
func (o operationAuditLogDo) FirstOrCreate() (*model.OperationAuditLog, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OperationAuditLog), nil
	}
}

// FindByPage ...
func (o operationAuditLogDo) FindByPage(
	offset int,
	limit int,
) (result []*model.OperationAuditLog, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

// ScanByPage ...
func (o operationAuditLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

// Scan ...
func (o operationAuditLogDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

// Delete ...
func (o operationAuditLogDo) Delete(models ...*model.OperationAuditLog) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *operationAuditLogDo) withDO(do gen.Dao) *operationAuditLogDo {
	o.DO = *do.(*gen.DO)
	return o
}
